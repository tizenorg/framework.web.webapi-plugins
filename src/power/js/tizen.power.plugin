/*
 * Copyright (c) 2014 Samsung Electronics Co., Ltd All Rights Reserved
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

(function() {
    'use strict';

    var _common = require('./tizen.Common');
    var T = _common.Type;
    var AV = _common.ArgumentValidator;
    var C = _common.Common;
    var _callSync = C.getCallSync('power');
    _common = undefined;

    console.logd = console.logd || console.log;

    var _internal = {};
    _internal.listener = undefined;
    _internal.currentState = '';

    function _handle_stateChanged(state) {
        if (!_internal.listner) {
            return;
        }

        var old = _internal.currentState;
        _internal.currentState = state;

        try {
            _internal.listner(old, state);
        } catch(e) {
            console.logd('WEBAPI-POWER', e.toString());
        }
    }

//  enumeration PowerResource ////////////////////////////////////////////////////
    var PowerResource = {
        SCREEN : 'SCREEN',
        CPU : 'CPU'
    };

//  enumeration PowerState ////////////////////////////////////////////////////
    var PowerState = {
        SCREEN_OFF : 'SCREEN_OFF',
        SCREEN_DIM : 'SCREEN_DIM',
        SCREEN_NORMAL : 'SCREEN_NORMAL',
        SCREEN_BRIGHT : 'SCREEN_BRIGHT',
        CPU_AWAKE : 'CPU_AWAKE'
    };

//  class PowerManager ////////////////////////////////////////////////////
    function PowerManager() {
    }

    PowerManager.prototype.request = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'resource',
                type : AV.Types.ENUM,
                values : T.getValues(PowerResource)
            },
            {
                name : 'state',
                type : AV.Types.ENUM,
                values : T.getValues(PowerState)
            }
        ]);

        if ((args.resource === 'CPU' && args.state !== 'CPU_AWAKE') ||
            (args.resource !== 'CPU' && args.state === 'CPU_AWAKE')) {
            C.throwTypeMismatch('Resource/state mismatch.');
        }

        var callArgs = {
            resource : args.resource,
            state : args.state
        };

        var result = _callSync('PowerManager_request', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    PowerManager.prototype.release = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'resource',
                type : AV.Types.ENUM,
                values : T.getValues(PowerResource)
            }
        ]);

        var callArgs = {
            resource : args.resource
        };

        var result = _callSync('PowerManager_release', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    PowerManager.prototype.setScreenStateChangeListener = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'listener',
                type : AV.Types.FUNCTION
            }
        ]);

        var result = _callSync('PowerManager_getCurrentState', {});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }

        _internal.currentState = C.getResultObject(result);
        _internal.listner = args.listener;

        console.log(_internal.currentState);

        native.addListener('power-ScreenStateChanged', _handle_stateChanged);
    };

    PowerManager.prototype.unsetScreenStateChangeListener = function() {
        _internal.listner = undefined;
        native.removeListener('power-ScreenStateChanged', _handle_stateChanged);
    };

    PowerManager.prototype.getScreenBrightness = function() {
        console.logd('WEBAPI-POWER', 'Not supported');
    };

    PowerManager.prototype.setScreenBrightness = function() {
        AV.validateMethod(arguments, [
            {
                name : 'brightness',
                type : AV.Types.DOUBLE
            }
        ]);

        console.logd('WEBAPI-POWER', 'Not supported');
    };

    PowerManager.prototype.isScreenOn = function() {
        console.logd('WEBAPI-POWER', 'Not supported');
    };

    PowerManager.prototype.restoreScreenBrightness = function() {
        console.logd('WEBAPI-POWER', 'Not supported');
    };

    PowerManager.prototype.turnScreenOn = function() {
        console.logd('WEBAPI-POWER', 'Not supported');
    };

    PowerManager.prototype.turnScreenOff = function() {
        console.logd('WEBAPI-POWER', 'Not supported');
    };

    module.exports = {
        power : {value: new PowerManager(), writable: false, enumerable: true}
    };
})();
