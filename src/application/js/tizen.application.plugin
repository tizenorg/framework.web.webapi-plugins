/*
 * Copyright (c) 2014 Samsung Electronics Co., Ltd All Rights Reserved
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

(function () {
    'use strict';

    // load modules ////////////////////////////////////////////////////

    var _common = require('./tizen.Common');
    var T = _common.Type;
    var Converter = _common.Converter;
    var AV = _common.ArgumentValidator;
    var C = _common.Common;
    var _callSync = C.getCallSync('application');
    var _call = C.getCall('application');
    _common = undefined;

    // helper functions ////////////////////////////////////////////////////

    function _createApplicationControlData(object) {
        var ret;
        if (!T.isNullOrUndefined(object)) {
            ret = new ApplicationControlData(object.key, object.value);
        }
        return ret;
    }

    function _createApplicationControlDataArray(object) {
        var ret = [];
        if (!T.isNullOrUndefined(object) && T.isArray(object)) {
            object.forEach(function (o) {
                var data = _createApplicationControlData(o);
                if (!T.isNullOrUndefined(data)) {
                    ret.push(data);
                }
            });
        }
        return ret;
    }

    function _createApplicationControl(object) {
        var ret;
        if (!T.isNullOrUndefined(object)) {
            ret = new ApplicationControl(object.operation,
                                         object.uri,
                                         object.mime,
                                         object.category,
                                         _createApplicationControlDataArray(object.data));
        }
        return ret;
    }

    function _createApplicationInformationArray(object) {
        var ret = [];
        if (!T.isNullOrUndefined(object) && T.isArray(object)) {
            object.forEach(function (o) {
                var data = new ApplicationInformation(o);
                if (!T.isNullOrUndefined(data)) {
                    ret.push(data);
                }
            });
        }
        return ret;
    }

    // class ApplicationManager ////////////////////////////////////////////////////

    var ApplicationManager = function() {
    };

    ApplicationManager.prototype.getCurrentApplication = function() {
        var result = _callSync('ApplicationManager_getCurrentApplication', {});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            return new Application(C.getResultObject(result));
        }
    };

    ApplicationManager.prototype.kill = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'contextId',
                type : AV.Types.STRING
            },
            {
                name : 'successCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            },
            {
                name : 'errorCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            }
        ]);

        var callback = function(result) {
            if (C.isFailure(result)) {
                C.callIfPossible(args.errorCallback, C.getErrorObject(result));
            } else {
                C.callIfPossible(args.successCallback);
            }
        };

        var result = _call('ApplicationManager_kill', {contextId: args.contextId}, callback);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    ApplicationManager.prototype.launch = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'id',
                type : AV.Types.STRING
            },
            {
                name : 'successCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            },
            {
                name : 'errorCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            }
        ]);

        var callback = function(result) {
            if (C.isFailure(result)) {
                C.callIfPossible(args.errorCallback, C.getErrorObject(result));
            } else {
                C.callIfPossible(args.successCallback);
            }
        };

        var result = _call('ApplicationManager_launch', {id: args.id}, callback);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    ApplicationManager.prototype.launchAppControl = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'appControl',
                type : AV.Types.PLATFORM_OBJECT,
                values : ApplicationControl
            },
            {
                name : 'id',
                type : AV.Types.STRING,
                optional : true,
                nullable : true
            },
            {
                name : 'successCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            },
            {
                name : 'errorCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            },
            {
                name : 'replyCallback',
                type : AV.Types.LISTENER,
                values : ['onsuccess', 'onfailure'],
                optional : true,
                nullable : true
            }
        ]);

        var replyCallbackId = 'ApplicationControlDataArrayReplyCallback_' + new Date().valueOf();
        var registeredReplyCallback = function(result) {
            result = JSON.parse(result);
            if (C.isFailure(result)) {
                C.callIfPossible(args.replyCallback.onfailure);
            } else {
                C.callIfPossible(args.replyCallback.onsuccess,
                                 _createApplicationControlDataArray(result.data));
            }
            native.removeListener(replyCallbackId, registeredReplyCallback);
        };

        var callback = function(result) {
            if (C.isFailure(result)) {
                C.callIfPossible(args.errorCallback, C.getErrorObject(result));
                native.removeListener(replyCallbackId, registeredReplyCallback);
            } else {
                C.callIfPossible(args.successCallback);
            }
        };

        var callArgs = {};
        callArgs.appControl = args.appControl;
        if (args.has.id) {
            callArgs.id = args.id;
        }
        if (args.has.replyCallback) {
            callArgs.replyCallback = replyCallbackId;
            native.addListener(replyCallbackId, registeredReplyCallback);
        }

        var result = _call('ApplicationManager_launchAppControl', callArgs, callback);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    ApplicationManager.prototype.findAppControl = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'appControl',
                type : AV.Types.PLATFORM_OBJECT,
                values : ApplicationControl
            },
            {
                name : 'successCallback',
                type : AV.Types.FUNCTION
            },
            {
                name : 'errorCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            }
        ]);

        var callback = function(result) {
            if (C.isFailure(result)) {
                C.callIfPossible(args.errorCallback, C.getErrorObject(result));
            } else {
                var r = C.getResultObject(result);
                args.successCallback(_createApplicationInformationArray(r.informationArray),
                                     _createApplicationControl(r.appControl));
            }
        };

        var callArgs = {appControl: args.appControl};
        var result = _call('ApplicationManager_findAppControl', callArgs, callback);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    ApplicationManager.prototype.getAppsContext = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'successCallback',
                type : AV.Types.FUNCTION
            },
            {
                name : 'errorCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            }
        ]);

        var callback = function(result) {
            if (C.isFailure(result)) {
                C.callIfPossible(args.errorCallback, C.getErrorObject(result));
            } else {
                var contexts = C.getResultObject(result).contexts;
                var c = [];
                contexts.forEach(function (i) {
                    c.push(new ApplicationContext(i));
                });
                args.successCallback(c);
            }
        };

        var result = _call('ApplicationManager_getAppsContext', {}, callback);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    ApplicationManager.prototype.getAppContext = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'contextId',
                type : AV.Types.STRING,
                optional : true,
                nullable : true
            }
        ]);

        var callArgs = {};

        if (args.has.contextId) {
            callArgs.contextId = args.contextId;
        }

        var result = _callSync('ApplicationManager_getAppContext', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            return new ApplicationContext(C.getResultObject(result));
        }
    };

    ApplicationManager.prototype.getAppsInfo = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'successCallback',
                type : AV.Types.FUNCTION
            },
            {
                name : 'errorCallback',
                type : AV.Types.FUNCTION,
                optional : true,
                nullable : true
            }
        ]);

        var callback = function(result) {
            if (C.isFailure(result)) {
                C.callIfPossible(args.errorCallback, C.getErrorObject(result));
            } else {
                args.successCallback(_createApplicationInformationArray(
                                         C.getResultObject(result).informationArray)
                );
            }
        };

        var result = _call('ApplicationManager_getAppsInfo', {}, callback);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    ApplicationManager.prototype.getAppInfo = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'id',
                type : AV.Types.STRING,
                optional : true,
                nullable : true
            }
        ]);

        var callArgs = {};

        if (args.has.id) {
            callArgs.id = args.id;
        }

        var result = _callSync('ApplicationManager_getAppInfo', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            return new ApplicationInformation(C.getResultObject(result));
        }
    };

    ApplicationManager.prototype.getAppCerts = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'id',
                type : AV.Types.STRING,
                optional : true,
                nullable : true
            }
        ]);

        var callArgs = {};

        if (args.has.id) {
            callArgs.id = args.id;
        }

        var result = _callSync('ApplicationManager_getAppCerts', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            var certificates = C.getResultObject(result);
            var c = [];
            certificates.forEach(function (i) {
                c.push(new ApplicationCertificate(i));
            });
            return c;
        }
    };

    ApplicationManager.prototype.getAppSharedURI = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'id',
                type : AV.Types.STRING,
                optional : true,
                nullable : true
            }
        ]);

        var callArgs = {};

        if (args.has.id) {
            callArgs.id = args.id;
        }

        var result = _callSync('ApplicationManager_getAppSharedURI', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            return C.getResultObject(result);
        }
    };

    ApplicationManager.prototype.getAppMetaData = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'id',
                type : AV.Types.STRING,
                optional : true,
                nullable : true
            }
        ]);

        var callArgs = {};

        if (args.has.id) {
            callArgs.id = args.id;
        }

        var result = _callSync('ApplicationManager_getAppMetaData', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            var metaData = C.getResultObject(result);
            var md = [];
            metaData.forEach(function (i) {
                md.push(new ApplicationMetaData(i));
            });
            return md;
        }
    };

    var _listeners = {};
    var _nextId = 0;

    function _ApplicationInformationEventCallback(event) {
        var e = JSON.parse(event);
        var d = null;

        switch (e.action) {
        case 'oninstalled':
        case 'onupdated':
            d = new ApplicationInformation(e.data);
            break;

        case 'onuninstalled':
            d = e.data;
            break;

        default:
            console.logd('Unknown mode: ' + e.action);
            return;
        }

        for (var watchId in _listeners) {
            if (_listeners.hasOwnProperty(watchId) && _listeners[watchId][e.action]) {
                _listeners[watchId][e.action](d);
            }
        }
    }

    ApplicationManager.prototype.addAppInfoEventListener = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'eventCallback',
                type : AV.Types.LISTENER,
                values : ['oninstalled', 'onupdated', 'onuninstalled']
            }
        ]);

        if (T.isEmptyObject(_listeners)) {
            native.addListener('ApplicationInformationEventCallback',
                               _ApplicationInformationEventCallback);
            _callSync('ApplicationManager_startAppInfoEventListener', {});
        }

        var watchId = ++_nextId;
        _listeners[watchId] = args.eventCallback;

        return watchId;
    };

    ApplicationManager.prototype.removeAppInfoEventListener = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'watchId',
                type : AV.Types.LONG
            }
        ]);

        var id = args.watchId;

        if (T.isNullOrUndefined(_listeners[id])) {
            throw new WebAPIException('NotFoundError', 'Watch ID not found.');
        }

        delete _listeners[id];

        if (T.isEmptyObject(_listeners)) {
            _callSync('ApplicationManager_stopAppInfoEventListener', {});
            native.removeListener('ApplicationInformationEventCallback',
                                  _ApplicationInformationEventCallback);
        }
    };

    // class Application ////////////////////////////////////////////////////

    function Application(data) {
        Object.defineProperties(this, {
            appInfo : {
                value : new ApplicationInformation(data.appInfo),
                writable : false,
                enumerable : true
            },
            contextId : {
                value : Converter.toString(data.contextId),
                writable : false,
                enumerable : true
            }
        });
    }

    Application.prototype.exit = function() {
        var result = _callSync('Application_exit', {});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }

        // TODO: temporary, till implementation in C++ is done
        process.exit();
    };

    Application.prototype.hide = function() {
        var result = _callSync('Application_hide', {});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    Application.prototype.getRequestedAppControl = function() {
        // TODO: wrt-service has to be modified so we don't have to use require/node.js here
        var bundle = require('/usr/lib/wrt-service/appfw.node').bundle;
        var callArgs = { bundle: bundle };

        var result = _callSync('Application_getRequestedAppControl', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            result = C.getResultObject(result);
            if (result) {
                var appControl = new RequestedApplicationControl(result);
                Object.defineProperty(appControl, '_bundle', {
                    enumerable: false,
                    configurable: false,
                    writable: false,
                    value: bundle
                });
                return appControl;
            } else {
                return null;
            }
        }
    };

    // class ApplicationInformation ////////////////////////////////////////////////////

    function ApplicationInformation(data) {
        var size;
        var sizeException;

        function sizeGetter() {
            if (undefined === size) {
                var callArgs = { packageId : this.packageId }; // jshint ignore:line
                var result = _callSync('ApplicationInformation_getSize', callArgs);

                if (C.isFailure(result)) {
                    sizeException = C.getErrorObject(result);
                    size = 0;
                } else {
                    size = C.getResultObject(result).size;
                }
            }

            if (undefined !== sizeException) {
                throw sizeException;
            }

            return size;
        }

        Object.defineProperties(this, {
            id : {
                value : data.id,
                writable : false,
                enumerable : true
            },
            name : {
                value : data.name,
                writable : false,
                enumerable : true
            },
            iconPath : {
                value : data.iconPath,
                writable : false,
                enumerable : true
            },
            version : {
                value : data.version,
                writable : false,
                enumerable : true
            },
            show : {
                value : data.show,
                writable : false,
                enumerable : true
            },
            categories : {
                value : data.categories,
                writable : false,
                enumerable : true
            },
            installDate : {
                value : new Date(data.installDate),
                writable : false,
                enumerable : true
            },
            size : {
                enumerable : true,
                set : function() {
                },
                get : sizeGetter
            },
            packageId : {
                value : data.packageId,
                writable : false,
                enumerable : true
            }
        });
    }

    // class ApplicationContext ////////////////////////////////////////////////////

    function ApplicationContext(data) {
        Object.defineProperties(this, {
            id    : {value: data.id, writable: false, enumerable: true},
            appId : {value: data.appId, writable: false, enumerable: true}
        });
    }

    // class ApplicationControlData ////////////////////////////////////////////////////

    function ApplicationControlData(k, v) {
        AV.validateConstructorCall(this, ApplicationControlData);

        var valid = (arguments.length >= 2) && T.isArray(v);

        var key;
        function keySetter(k) {
            key = Converter.toString(k);
        }
        if (valid) {
            keySetter(k);
        }

        var value;
        function valueSetter(v) {
            if (T.isArray(v)) {
                value = [];
                for (var i = 0; i < v.length; ++i) {
                    value.push(Converter.toString(v[i]));
                }
            }
        }
        if (valid) {
            valueSetter(v);
        }

        Object.defineProperties(this, {
            key : {
                enumerable : true,
                set : keySetter,
                get : function() {
                    return key;
                }
            },
            value : {
                enumerable : true,
                set : valueSetter,
                get : function() {
                    return value;
                }
            }
        });
    }

    // class ApplicationControl ////////////////////////////////////////////////////

    function ApplicationControl(o, u, m, c, d) {
        AV.validateConstructorCall(this, ApplicationControl);

        var valid = (arguments.length >= 1);

        var operation;
        function operationSetter(o) {
            operation = Converter.toString(o);
        }
        if (valid) {
            operationSetter(o);
        }

        var uri;
        function uriSetter(u) {
            if (T.isNull(u)) {
                uri = u;
            } else {
                uri = Converter.toString(u);
            }
        }
        if (valid) {
            uriSetter(T.isUndefined(u) ? null : u);
        }

        var mime;
        function mimeSetter(m) {
            if (T.isNull(m)) {
                mime = m;
            } else {
                mime = Converter.toString(m);
            }
        }
        if (valid) {
            mimeSetter(T.isUndefined(m) ? null : m);
        }

        var category;
        function categorySetter(c) {
            if (T.isNull(c)) {
                category = c;
            } else {
                category = Converter.toString(c);
            }
        }
        if (valid) {
            categorySetter(T.isUndefined(c) ? null : c);
        }

        var data;
        function dataSetter(d) {
            if (T.isArray(d)) {
                for (var i = 0; i < d.length; ++i) {
                    if (!(d[i] instanceof ApplicationControlData)) {
                        return;
                    }
                }
                data = d;
            }
        }
        if (valid) {
            dataSetter(T.isNullOrUndefined(d) ? [] : d);
        }

        Object.defineProperties(this, {
            operation : {
                enumerable : true,
                set : operationSetter,
                get : function() {
                    return operation;
                }
            },
            uri : {
                enumerable : true,
                set : uriSetter,
                get : function() {
                    return uri;
                }
            },
            mime : {
                enumerable : true,
                set : mimeSetter,
                get : function() {
                    return mime;
                }
            },
            category : {
                enumerable : true,
                set : categorySetter,
                get : function() {
                    return category;
                }
            },
            data : {
                enumerable : true,
                set : dataSetter,
                get : function() {
                    return data;
                }
            }
        });
    }

    // class RequestedApplicationControl ////////////////////////////////////////////////////

    function RequestedApplicationControl(data) {
        Object.defineProperties(this, {
            appControl : {
                value: _createApplicationControl(data.appControl),
                writable: false,
                enumerable: true
            },
            callerAppId : {
                value: data.callerAppId,
                writable: false,
                enumerable: true
            }
        });
    }

    RequestedApplicationControl.prototype.replyResult = function() {
        var args = AV.validateMethod(arguments, [
            {
                name : 'data',
                type : AV.Types.ARRAY,
                values : ApplicationControlData
            }
        ]);

        var callArgs = { bundle : this._bundle };

        if (args.has.data) {
            callArgs.data = args.data;
        } else {
            callArgs.data = [];
        }

        var result = _callSync('RequestedApplicationControl_replyResult', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    RequestedApplicationControl.prototype.replyFailure = function() {
        var callArgs = { bundle : this._bundle };

        var result = _callSync('RequestedApplicationControl_replyFailure', callArgs);

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    // class ApplicationCertificate ////////////////////////////////////////////////////

    function ApplicationCertificate(data) {
        Object.defineProperties(this, {
            type : {
                value : data.type,
                writable : false,
                enumerable : true
            },
            value : {
                value : data.value,
                writable : false,
                enumerable : true
            }
        });
    }

    // class ApplicationMetaData ////////////////////////////////////////////////////

    function ApplicationMetaData(data) {
        Object.defineProperties(this, {
            key : {
                value : data.key,
                writable : false,
                enumerable : true
            },
            value : {
                value : data.value,
                writable : false,
                enumerable : true
            }
        });
    }

    // exports ////////////////////////////////////////////////////
    module.exports = {
        application : {
            value : new ApplicationManager(),
            writable : false,
            enumerable : true
        },
        ApplicationControlData : {
            value : ApplicationControlData,
            writable : false,
            enumerable : true
        },
        ApplicationControl : {
            value : ApplicationControl,
            writable : false,
            enumerable : true
        }
    };
})();
