/*
 * Copyright (c) 2014 Samsung Electronics Co., Ltd All Rights Reserved
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
(function() {
    'use strict';

//  helper functions ////////////////////////////////////////////////////
    var _common = require('./tizen.Common');
    var T = _common.Type;
    var Converter = _common.Converter;
    var AV = _common.ArgumentValidator;
    var C = _common.Common;
    var _callSync = C.getCallSync('timeutil');
    _common = undefined;

    var _GMT_ID = 'GMT';
    var _LOCAL_ID = '__local__';

    function _createShiftedDate(tzDate){
        return new Date(tzDate._shiftedTimestamp);
    }

    function _createUTCDate(tzDate){
        return new Date(tzDate._utcTimestamp);
    }

    function _fill(date, tzDate){
        tzDate._shiftedTimestamp = date.getTime();
        tzDate._utcTimestamp = Number(tzDate._shiftedTimestamp) - Number(tzDate._timezoneOffset);
    }

    function _fillWithUTC(date, tzDate){
        tzDate._utcTimestamp = date.getTime();
        tzDate._shiftedTimestamp = Number(tzDate._utcTimestamp) + Number(tzDate._timezoneOffset);
    }

    function PrivateTZDate(timestamp, timezone, offset) {
        Object.defineProperties(this, {
            ts : {value: timestamp, writable: false, enumerable: false},
            tzId : {value: timezone, writable: false, enumerable: false},
            o : {value: offset, writable: false, enumerable: false}
        });
    }

    function _getTimezoneOffset(timestamp, tzName) {
        var callArgs = {
            timezone  : Converter.toString(tzName),
            timestamp : Converter.toString(timestamp)
        };
        var result = _callSync('TZDate_getTimezoneOffset', callArgs);
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        var res = {
            offset : Converter.toLong(C.getResultObject(result).offset),
            modifier : Converter.toLong(C.getResultObject(result).modifier)
        }
        return res;
    }

    function _getLocalTimezoneOffset() {
        return -1 * (new Date().getTimezoneOffset()) * 60 * 1000; // cast to milliseconds
    }

    function _constructTZDate(obj, privateTZDate) {
        var utcTimestamp = privateTZDate.ts;
        var tzName = privateTZDate.tzId;
        var offset = privateTZDate.o;

        switch (tzName) {
        case _LOCAL_ID:
            console.logd('Entered _constructTZDate for local timezone');

            tzName = tizen.time.getLocalTimezone();

            if (T.isNullOrUndefined(offset)) {
                offset = _getLocalTimezoneOffset();
            }
            break;

        case _GMT_ID:
            console.logd('Entered _constructTZDate for GMT');

            if (T.isNullOrUndefined(offset)) {
                offset = 0;
            }
            break;

        default:
            console.logd('Entered _constructTZDate for: ' + tzName);

            if (T.isNullOrUndefined(offset)) {
                // throws if tzName is invalid
                offset = _getTimezoneOffset(utcTimestamp, tzName).offset;
            }
            break;
        }

        Object.defineProperties(obj, {
            _utcTimestamp : {value: utcTimestamp, writable: true, enumerable: false},
            _shiftedTimestamp : {value: utcTimestamp + offset, writable: true, enumerable: false},
            _timezoneName : {value: tzName, writable: true, enumerable: false},
            _timezoneOffset : {value: offset, writable: true, enumerable: false}
        });
    }

//  class TZDate ////////////////////////////////////////////////////
    function TZDate(p1, p2, day, hours, minutes, seconds, milliseconds, timezone) {
        AV.validateConstructorCall(this, TZDate);

        var priv;
        //copy constructor section (should be only for private usage)
        if (p1 instanceof PrivateTZDate) {
            priv = p1;
        } else {
            //Public constructor section
            console.logd('Entered TZDate constructor with: ' + arguments.length + ' attributes');

            var date;

            if (arguments.length < 3) {
                if (T.isDate(p1)) {
                    date = p1;
                } else {
                    date = new Date();
                }
                timezone = p2;
            } else {
                p1 = p1 ? p1 : 0;
                p2 = p2 ? p2 : 0;
                day = day ? day : 0;
                hours = hours ? hours : 0;
                minutes = minutes ? minutes : 0;
                seconds = seconds ? seconds : 0;
                milliseconds = milliseconds ? milliseconds : 0;

                date = new Date(p1, p2, day, hours, minutes, seconds, milliseconds);
            }

            var offset = _getLocalTimezoneOffset();
            var utcTimestamp = date.getTime();
            var tzName = _LOCAL_ID;

            if (!T.isNullOrUndefined(timezone)) {
                timezone = Converter.toString(timezone);
                var timezoneTimestamp = new Date(Date.UTC(date.getFullYear(),
                                                          date.getMonth(),
                                                          date.getDate(),
                                                          date.getHours(),
                                                          date.getMinutes(),
                                                          date.getSeconds(),
                                                          date.getMilliseconds())).getTime();
                try {
                    var offsetObject = _getTimezoneOffset(timezoneTimestamp, timezone);
                    offset = offsetObject.offset;
                    utcTimestamp = timezoneTimestamp - offset;
                    //correction of missing/extra hour on DST change
                    var modifier = offsetObject.modifier;
                    if (modifier > 0) {
                        //this is for case when 2AM becomes 3AM (but offset must be corrected -
                        //missing one hour)
                        offset += modifier;
                    } else {
                        //this is for case when extra hour appers - prevents error of
                        //unnecessary shift of hour when timezone changes
                        offset -= modifier;
                        utcTimestamp += modifier;
                    }
                    tzName = timezone;
                } catch(e) {
                    // in case of exception we fall back to local time zone
                }
            }

            priv = new PrivateTZDate(utcTimestamp, tzName, offset);
        }

        _constructTZDate(this, priv);
    }

    TZDate.prototype.getDate = function() {
        console.logd('Entered TZDate.getDate');
        //getters realized with pattern
        //---> use _shiftedTimestamp (_utcTimestamp (UTC) with added _timezoneOffset)
        //---> create Date instance
        //---> return d.getUTCDate()  --- to avoid locale timezone impact of JS Date object
        return _createShiftedDate(this).getUTCDate();
    };

    function _updateTZDate(tzdate, args, param, func) {
        var a = AV.validateMethod(args, [
            {
                name : param,
                type : AV.Types.LONG
            }
        ]);

        //setters realized with pattern
        //---> use _shiftedTimestamp (_utcTimestamp (UTC) with added _timezoneOffset)
        //---> create Date instance
        //---> setUTCDate of JS Date object
        //---> getTime of object to set _shiftedTimestmp (avoiding timezone of JS Date)
        //---> fix _utcTimestamp with subtraction of _timezoneOffset
        var date = _createShiftedDate(tzdate);
        date[func](a[param]);
        _fill(date, tzdate);
    }

    function _updateTZDateUTC(tzdate, args, param, func) {
        var a = AV.validateMethod(args, [
            {
                name : param,
                type : AV.Types.LONG
            }
        ]);
        var date = _createUTCDate(tzdate);
        date[func](a[param]);
        _fillWithUTC(date, tzdate);
    }

    TZDate.prototype.setDate = function() {
        console.logd('Entered TZDate.setDate');
        _updateTZDate(this, arguments, 'date', 'setUTCDate');
    };

    TZDate.prototype.getDay = function() {
        console.logd('Entered TZDate.getDay');
        return _createShiftedDate(this).getUTCDay();
    };

    TZDate.prototype.getFullYear = function() {
        console.logd('Entered TZDate.getFullYear');
        return _createShiftedDate(this).getUTCFullYear();
    };

    TZDate.prototype.setFullYear = function() {
        console.logd('Entered TZDate.setFullYear');
        _updateTZDate(this, arguments, 'year', 'setUTCFullYear');
    };

    TZDate.prototype.getHours = function() {
        console.logd('Entered TZDate.getHours');
        return _createShiftedDate(this).getUTCHours();
    };

    TZDate.prototype.setHours = function() {
        console.logd('Entered TZDate.setHours');
        _updateTZDate(this, arguments, 'hours', 'setUTCHours');
    };

    TZDate.prototype.getMilliseconds = function() {
        console.logd('Entered TZDate.getMilliseconds');
        return _createShiftedDate(this).getUTCMilliseconds();
    };

    TZDate.prototype.setMilliseconds = function() {
        console.logd('Entered TZDate.setMilliseconds');
        _updateTZDate(this, arguments, 'ms', 'setUTCMilliseconds');
    };

    TZDate.prototype.getMinutes = function() {
        console.logd('Entered TZDate.getMinutes');
        return _createShiftedDate(this).getUTCMinutes();
    };

    TZDate.prototype.setMinutes = function() {
        console.logd('Entered TZDate.setMinutes');
        _updateTZDate(this, arguments, 'minutes', 'setUTCMinutes');
    };

    TZDate.prototype.getMonth = function() {
        console.logd('Entered TZDate.getMonth');
        return _createShiftedDate(this).getUTCMonth();
    };

    TZDate.prototype.setMonth = function() {
        console.logd('Entered TZDate.setMonth');
        _updateTZDate(this, arguments, 'month', 'setUTCMonth');
    };

    TZDate.prototype.getSeconds = function() {
        console.logd('Entered TZDate.getSeconds');
        return _createShiftedDate(this).getUTCSeconds();
    };

    TZDate.prototype.setSeconds = function() {
        console.logd('Entered TZDate.setSeconds');
        _updateTZDate(this, arguments, 'seconds', 'setUTCSeconds');
    };

    TZDate.prototype.getUTCDate = function() {
        console.logd('Entered TZDate.getUTCDate');
        return _createUTCDate(this).getUTCDate();
    };

    TZDate.prototype.setUTCDate = function() {
        console.logd('Entered TZDate.setUTCDate');
        _updateTZDateUTC(this, arguments, 'date', 'setUTCDate');
    };

    TZDate.prototype.getUTCDay = function() {
        console.logd('Entered TZDate.getUTCDay');
        return _createUTCDate(this).getUTCDay();
    };

    TZDate.prototype.getUTCFullYear = function() {
        console.logd('Entered TZDate.getUTCFullYear');
        return _createUTCDate(this).getUTCFullYear();
    };

    TZDate.prototype.setUTCFullYear = function() {
        console.logd('Entered TZDate.setUTCFullYear');
        _updateTZDateUTC(this, arguments, 'year', 'setUTCFullYear');
    };

    TZDate.prototype.getUTCHours = function() {
        console.logd('Entered TZDate.getUTCHours');
        return _createUTCDate(this).getUTCHours();
    };

    TZDate.prototype.setUTCHours = function() {
        console.logd('Entered TZDate.setUTCHours');
        _updateTZDateUTC(this, arguments, 'hours', 'setUTCHours');
    };

    TZDate.prototype.getUTCMilliseconds = function() {
        console.logd('Entered TZDate.getUTCMilliseconds');
        return _createUTCDate(this).getUTCMilliseconds();
    };

    TZDate.prototype.setUTCMilliseconds = function() {
        console.logd('Entered TZDate.setUTCMilliseconds');
        _updateTZDateUTC(this, arguments, 'ms', 'setUTCMilliseconds');
    };

    TZDate.prototype.getUTCMinutes = function() {
        console.logd('Entered TZDate.getUTCMinutes');
        return _createUTCDate(this).getUTCMinutes();
    };

    TZDate.prototype.setUTCMinutes = function() {
        console.logd('Entered TZDate.setUTCMinutes');
        _updateTZDateUTC(this, arguments, 'minutes', 'setUTCMinutes');
    };

    TZDate.prototype.getUTCMonth = function() {
        console.logd('Entered TZDate.getUTCMonth');
        return _createUTCDate(this).getUTCMonth();
    };

    TZDate.prototype.setUTCMonth = function() {
        console.logd('Entered TZDate.setUTCMonth');
        _updateTZDateUTC(this, arguments, 'month', 'setUTCMonth');
    };

    TZDate.prototype.getUTCSeconds = function() {
        console.logd('Entered TZDate.getUTCSeconds');
        return _createUTCDate(this).getUTCSeconds();
    };

    TZDate.prototype.setUTCSeconds = function() {
        console.logd('Entered TZDate.setUTCSeconds');
        _updateTZDateUTC(this, arguments, 'seconds', 'setUTCSeconds');
    };

    TZDate.prototype.getTimezone = function() {
        console.logd('Entered TZDate.getTimezone');
        return this._timezoneName;
    };

    TZDate.prototype.toTimezone = function() {
        console.logd('Entered TZDate.toTimezone');
        var args = AV.validateMethod(arguments, [
            {
                name : 'timezone',
                type : AV.Types.STRING
            }
        ]);
        return new TZDate(new PrivateTZDate(this._utcTimestamp, args.timezone));
    };

    TZDate.prototype.toLocalTimezone = function() {
        console.logd('Entered TZDate.toLocalTimezone');
        return new TZDate(new PrivateTZDate(this._utcTimestamp, _LOCAL_ID));
    };

    TZDate.prototype.toUTC = function() {
        console.logd('Entered TZDate.toUTC');
        return new TZDate(new PrivateTZDate(this._utcTimestamp, _GMT_ID));
    };

    TZDate.prototype.difference = function() {
        console.logd('Entered TZDate.difference');
        var args = AV.validateMethod(arguments, [
            {
                name : 'other',
                type : AV.Types.PLATFORM_OBJECT,
                values : TZDate
            }
        ]);
        var length = this._utcTimestamp - args.other._utcTimestamp;
        var type = _timeDurationUnit.MSECS;
        if (length % _timeDurationUnitValue.DAYS === 0) {
            length /= _timeDurationUnitValue.DAYS;
            type = _timeDurationUnit.DAYS;
        }
        return new TimeDuration(length, type);
    };

    TZDate.prototype.equalsTo = function() {
        console.logd('Entered TZDate.equalsTo');
        var args = AV.validateMethod(arguments, [
            {
                name : 'other',
                type : AV.Types.PLATFORM_OBJECT,
                values : TZDate
            }
        ]);
        return this._utcTimestamp === args.other._utcTimestamp;
    };

    TZDate.prototype.earlierThan = function() {
        console.logd('Entered TZDate.earlierThan');
        var args = AV.validateMethod(arguments, [
            {
                name : 'other',
                type : AV.Types.PLATFORM_OBJECT,
                values : TZDate
            }
        ]);
        return this._utcTimestamp < args.other._utcTimestamp;
    };

    TZDate.prototype.laterThan = function() {
        console.logd('Entered TZDate.laterThan');
        var args = AV.validateMethod(arguments, [
            {
                name : 'other',
                type : AV.Types.PLATFORM_OBJECT,
                values : TZDate
            }
        ]);
        return this._utcTimestamp > args.other._utcTimestamp;
    };

    TZDate.prototype.addDuration = function() {
        console.logd('Entered TZDate.addDuration');
        var args = AV.validateMethod(arguments, [
            {
                name : 'duration',
                type : AV.Types.PLATFORM_OBJECT,
                values : TimeDuration
            }
        ]);
        return new TZDate(new PrivateTZDate(this._utcTimestamp +
                _getLengthInMsecsUnit(args.duration.length, args.duration.unit),
                this._timezoneName));
    };

    TZDate.prototype.toLocaleDateString = function() {
        console.logd('Entered TZDate.toLocaleDateString');
        var result = _callSync('TZDate_toLocaleDateString',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).string;
    };

    TZDate.prototype.toLocaleTimeString = function() {
        console.logd('Entered TZDate.toLocaleTimeString');
        var result = _callSync('TZDate_toLocaleTimeString',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).string;
    };

    TZDate.prototype.toLocaleString = function() {
        console.logd('Entered TZDate.toLocaleString');
        var result = _callSync('TZDate_toLocaleString',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).string;
    };

    TZDate.prototype.toDateString = function() {
        console.logd('Entered TZDate.toDateString');
        var result = _callSync('TZDate_toDateString',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).string;
    };

    TZDate.prototype.toTimeString = function() {
        console.logd('Entered TZDate.toTimeString');
        var result = _callSync('TZDate_toTimeString',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).string;
    };

    TZDate.prototype.toString = function() {
        console.logd('Entered TZDate.toString');
        var result = _callSync('TZDate_toString',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return  C.getResultObject(result).string;
    };

    TZDate.prototype.getTimezoneAbbreviation = function() {
        console.logd('Entered TZDate.getTimezoneAbbreviation');
        var result = _callSync('TZDate_getTimezoneAbbreviation',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).abbreviation;
    };

    TZDate.prototype.secondsFromUTC = function() {
        console.logd('Entered TZDate.secondsFromUTC');
        return -this._timezoneOffset/1000;
    };

    TZDate.prototype.isDST = function() {
        console.logd('Entered TZDate.isDST');
        var result = _callSync('TZDate_isDST',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).isDST;
    };

    TZDate.prototype.getPreviousDSTTransition = function() {
        console.logd('Entered TZDate.getPreviousDSTTransition');
        var result = _callSync('TZDate_getPreviousDSTTransition',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }

        return new TZDate(new PrivateTZDate(C.getResultObject(result).prevDSTDate,
                                            this._timezoneName));
    };

    TZDate.prototype.getNextDSTTransition = function() {
        console.logd('Entered TZDate.getNextDSTTransition');
        var result = _callSync('TZDate_getNextDSTTransition',
                {timezone: String(this._timezoneName),
                 timestamp: String(this._utcTimestamp)});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }

        return new TZDate(new PrivateTZDate(C.getResultObject(result).nextDSTDate,
                                            this._timezoneName));
    };

//  TimeUtil helpers ///////////////////////////////////////////////////
    var _timeDurationUnit = {
        MSECS: 'MSECS',
        SECS : 'SECS',
        MINS : 'MINS',
        HOURS: 'HOURS',
        DAYS : 'DAYS'
    };

    var _timeDurationUnitValue = {
        MSECS: Number(1),
        SECS : Number(1000),
        MINS : Number(60*1000),
        HOURS: Number(60*60*1000),
        DAYS : Number(24*60*60*1000)
    };

    function _getLengthInMsecsUnit(length, unit) {
        if (unit === _timeDurationUnit.MSECS) {
            return length;
        } else if (unit === _timeDurationUnit.SECS) {
            return length * _timeDurationUnitValue.SECS;
        } else if (unit === _timeDurationUnit.MINS) {
            return length * _timeDurationUnitValue.MINS;
        } else if (unit === _timeDurationUnit.HOURS) {
            return length * _timeDurationUnitValue.HOURS;
        } else if (unit === _timeDurationUnit.DAYS) {
            return length * _timeDurationUnitValue.DAYS;
        } else {
            C.throwTypeMismatch();
        }
    }

    function _convertMsecsToBiggestPossibleUnit(len) {
        var length;
        var unit;
        if (len % _timeDurationUnitValue.DAYS === 0) {
            length = len / _timeDurationUnitValue.DAYS;
            unit = _timeDurationUnit.DAYS;
        } else if (len % _timeDurationUnitValue.HOURS === 0) {
            length = len / _timeDurationUnitValue.HOURS;
            unit = _timeDurationUnit.HOURS;
        } else if (len % _timeDurationUnitValue.MINS === 0) {
            length = len / _timeDurationUnitValue.MINS;
            unit = _timeDurationUnit.MINS;
        } else if (len % _timeDurationUnitValue.SECS === 0) {
            length = len / _timeDurationUnitValue.SECS;
            unit = _timeDurationUnit.SECS;
        } else {
            length = len;
            unit = _timeDurationUnit.MSECS;
        }
        return new TimeDuration(length, unit);
    }

//  class TimeDuration ////////////////////////////////////////////////////
    function TimeDuration(length, unit) {
        console.logd('Entered TimeDuration constructor');
        AV.validateConstructorCall(this, TimeDuration);
        var l, u;
        if (arguments.length >= 2) {
            l = Converter.toLongLong(length);
            unit = Converter.toString(unit);
            if (T.hasProperty(_timeDurationUnit, unit)) {
                u = unit;
            } else {
                u = _timeDurationUnit.MSECS;
            }
        } else if (arguments.length === 1) {
            l = Converter.toLongLong(length);
            u = _timeDurationUnit.MSECS;
        } else {
            l = undefined;
            u = undefined;
        }
        function lengthSetter(val) {
            if (!T.isNullOrUndefined(val)) {
                l = val;
            }
        }
        function unitSetter(val) {
            if (!T.isNullOrUndefined(val)) {
                u = val;
            }
        }
        Object.defineProperties(this, {
            length : {
                enumerable : true,
                set : lengthSetter,
                get : function() {
                    return l;
                }
            },
            unit : {
                enumerable : true,
                set : unitSetter,
                get : function() {
                    return u;
                }
            }
        });
    }

    TimeDuration.prototype.difference = function() {
        console.logd('Entered TimeDuration.difference');

        var args = AV.validateMethod(arguments, [
            {
                name : 'other',
                type : AV.Types.PLATFORM_OBJECT,
                values : TimeDuration
            }
        ]);

        if (this.unit === args.other.unit) {
            return new TimeDuration(this.length - args.other.length, this.unit);
        } else {
            var l1 = _getLengthInMsecsUnit(this.length, this.unit);
            var l2 = _getLengthInMsecsUnit(args.other.length, args.other.unit);
            return _convertMsecsToBiggestPossibleUnit(l1 - l2);
        }
    };

    TimeDuration.prototype.equalsTo = function() {
        console.logd('Entered TimeDuration.equalsTo');

        var args = AV.validateMethod(arguments, [
            {
                name : 'other',
                type : AV.Types.PLATFORM_OBJECT,
                values : TimeDuration
            }
        ]);

        if (this.unit === args.other.unit) {
            return (this.length === args.other.length) ? true : false;
        } else {
            var l1 = _getLengthInMsecsUnit(this.length, this.unit);
            var l2 = _getLengthInMsecsUnit(args.other.length, args.other.unit);
            return (l1 === l2) ? true : false;
        }
    };

    TimeDuration.prototype.lessThan = function() {
        console.logd('Entered TimeDuration.lessThan');

        var args = AV.validateMethod(arguments, [
            {
                name : 'other',
                type : AV.Types.PLATFORM_OBJECT,
                values : TimeDuration
            }
        ]);

        if (this.unit === args.other.unit) {
            return (this.length < args.other.length) ? true : false;
        } else {
            var l1 = _getLengthInMsecsUnit(this.length, this.unit);
            var l2 = _getLengthInMsecsUnit(args.other.length, args.other.unit);
            return (l1 < l2) ? true : false;
        }
    };

    TimeDuration.prototype.greaterThan = function() {
        console.logd('Entered TimeDuration.greaterThan');

        var args = AV.validateMethod(arguments, [
            {
                name : 'other',
                type : AV.Types.PLATFORM_OBJECT,
                values : TimeDuration
            }
        ]);

        if (this.unit === args.other.unit) {
            return (this.length > args.other.length) ? true : false;
        } else {
            var l1 = _getLengthInMsecsUnit(this.length, this.unit);
            var l2 = _getLengthInMsecsUnit(args.other.length, args.other.unit);
            return (l1 > l2) ? true : false;
        }
    };


//  class TimeUtil ////////////////////////////////////////////////////
    function TimeUtil() {}

    TimeUtil.prototype.getCurrentDateTime = function() {
        console.logd('Entered TimeUtil.getCurrentDateTime');
        return new TZDate();
    };

    TimeUtil.prototype.getLocalTimezone = function() {
        console.logd('Entered TimeUtil.getLocalTimezone');
        var result = _callSync('TZDate_getTimezone', {});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).timezoneId;
    };

    var _availableTimezones = [];       //an array for holding available timezones

    TimeUtil.prototype.getAvailableTimezones = function() {
        console.logd('Entered TimeUtil.getAvailableTimezones');
        if (_availableTimezones.length === 0) {
            var result = _callSync('TimeUtil_getAvailableTimezones', {});
            if (C.isFailure(result)) {
                throw C.getErrorObject(result);
            }
            _availableTimezones = C.getResultObject(result).availableTimezones;
        }

        return _availableTimezones.slice(0);
    };

    TimeUtil.prototype.getDateFormat = function() {
        console.logd('Entered TimeUtil.getDateFormat');

        var args = AV.validateMethod(arguments, [
            {
                name : 'shortformat',
                type : AV.Types.BOOLEAN,
                optional : true,
                nullable : true
            }
        ]);

        if (!args.has.shortformat || T.isNull(args.shortformat)) {
            args.shortformat = false;
        }

        var result = _callSync('TimeUtil_getDateFormat', {shortformat: args.shortformat});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).format;
    };

    TimeUtil.prototype.getTimeFormat = function() {
        console.logd('Entered TimeUtil.getTimeFormat');
        var result = _callSync('TimeUtil_getTimeFormat', {});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
        return C.getResultObject(result).format;
    };

    TimeUtil.prototype.isLeapYear = function() {
        console.logd('Entered TimeUtil.isLeapYear');

        var args = AV.validateMethod(arguments, [
            {
                name : 'year',
                type : AV.Types.LONG
            }
        ]);

        // new Date(year, 1, 29).getMonth() === 1 <-- does not work for years 0-99
        return ((args.year % 4 === 0) && (args.year % 100 !== 0)) || (args.year % 400 === 0);
    };

    var _timeUtilDateTimeChangeListener;

    function _timeUtilDateTimeChangeListenerCallback() {
        console.logd('Entered _timeUtilDateTimeChangeListenerCallback');
        C.callIfPossible(_timeUtilDateTimeChangeListener);
    }

    TimeUtil.prototype.setDateTimeChangeListener = function() {
        console.logd('Entered TimeUtil.setDateTimeChangeListener');
        var args = AV.validateMethod(arguments, [
            {
                name : 'changeCallback',
                type : AV.Types.FUNCTION
            }
        ]);
        _timeUtilDateTimeChangeListener = args.changeCallback;
        native.addListener('DateTimeChangeListener',
                           _timeUtilDateTimeChangeListenerCallback);
        var result = _callSync('TimeUtil_setDateTimeChangeListener', {});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    TimeUtil.prototype.unsetDateTimeChangeListener = function() {
        console.logd('Entered TimeUtil.unsetDateTimeChangeListener');
        native.removeListener('DateTimeChangeListener',
                              _timeUtilDateTimeChangeListenerCallback);
        var result = _callSync('TimeUtil_unsetDateTimeChangeListener', {});
        _timeUtilDateTimeChangeListener = undefined;
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    var _timeUtilTimezoneChangeListener;

    function _timeUtilTimezoneChangeListenerCallback() {
        console.logd('Entered _timeUtilTimezoneListenerCallback');
        C.callIfPossible(_timeUtilTimezoneChangeListener);
    }

    TimeUtil.prototype.setTimezoneChangeListener = function() {
        console.logd('Entered TimeUtil.setTimezoneChangeListener');
        var args = AV.validateMethod(arguments, [
            {
                name : 'changeCallback',
                type : AV.Types.FUNCTION
            }
        ]);
        _timeUtilTimezoneChangeListener = args.changeCallback;
        native.addListener('TimezoneChangeListener',
                           _timeUtilTimezoneChangeListenerCallback);
        var result = _callSync('TimeUtil_setTimezoneChangeListener', {});
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    TimeUtil.prototype.unsetTimezoneChangeListener = function() {
        console.logd('Entered TimeUtil.unsetTimezoneChangeListener');
        native.removeListener('TimezoneChangeListener',
                              _timeUtilTimezoneChangeListenerCallback);
        var result = _callSync('TimeUtil_unsetTimezoneChangeListener', {});
        _timeUtilTimezoneChangeListener = undefined;
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };


//  exports ////////////////////////////////////////////////////

    module.exports = {
        time : {value: new TimeUtil(), writable: false, enumerable: true},
        TZDate : {value: TZDate, writable: false, enumerable: true},
        TimeDuration : {value: TimeDuration, writable: false, enumerable: true}
    };

})();
