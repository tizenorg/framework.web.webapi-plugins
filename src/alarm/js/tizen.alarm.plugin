/*
 * Copyright (c) 2014 Samsung Electronics Co., Ltd All Rights Reserved
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

(function() {
    'use strict';

    var _common = require('./tizen.Common');
    var T = _common.Type;
    var Converter = _common.Converter;
    var AV = _common.ArgumentValidator;
    var C = _common.Common;
    var _callSync = C.getCallSync('alarm');
    _common = undefined;

    var AlarmManager = function () {
        Object.defineProperties(this, {
            PERIOD_MINUTE:  { value: 60, writable: false, enumerable: true},
            PERIOD_HOUR:    { value: 3600, writable: false, enumerable: true},
            PERIOD_DAY:     { value: 86400, writable: false, enumerable: true},
            PERIOD_WEEK:    { value: 604800, writable: false, enumerable: true},
        });
    };

//  internal /////////////////////////////////////////////////////////////
//  this function should be kept in internal scope
    function InternalData(id) {
        this.id = id;
    }

//  class AlarmManager ////////////////////////////////////////////////////
    AlarmManager.prototype.add = function () {
        var args = AV.validateMethod(arguments, [
            {
                name : 'alarm',
                type : AV.Types.PLATFORM_OBJECT,
                values : [AlarmRelative, AlarmAbsolute]
            },
            {
                name : 'applicationId',
                type : AV.Types.STRING,
            },
            {
                name : 'appControl',
                type : AV.Types.PLATFORM_OBJECT,
                values : tizen.ApplicationControl,
                optional : true,
                nullable : true
            },
        ]);

        var type = null, seconds = 0;
        if (args.alarm instanceof AlarmRelative) {
            type = 'AlarmRelative';
        } else if (args.alarm instanceof AlarmAbsolute) {
            type = 'AlarmAbsolute';
            seconds = args.alarm.date.getTime();
        }

        var callArgs = {};
        callArgs.alarm = args.alarm;
        callArgs.applicationId = args.applicationId;
        if (args.has.appControl) {
            callArgs.appControl = args.appControl;
        }

        callArgs.type = type;
        callArgs.seconds = Converter.toString(seconds);

        var result = _callSync('AlarmManager_add', callArgs);
        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            Object.defineProperties(args.alarm, {
                id: {
                    value: Converter.toString(C.getResultObject(result).alarm_id),
                    writable: false, enumerable: true, configurable: true}
            });
        }
    };

    AlarmManager.prototype.remove = function () {
        var args = AV.validateMethod(arguments, [
            {
                name : 'id',
                type : AV.Types.STRING,
            }
        ]);

        var result = _callSync('AlarmManager_remove', {id: Number(args.id)});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    AlarmManager.prototype.removeAll = function () {
        var result = _callSync('AlarmManager_removeAll', {});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        }
    };

    AlarmManager.prototype.get = function () {
        var args = AV.validateMethod(arguments, [
            {
                name : 'id',
                type : AV.Types.STRING,
            }
        ]);

        var result = _callSync('AlarmManager_get', {id: Number(args.id)});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            result = C.getResultObject(result);
            if ('AlarmRelative' === result.type) {
                return new AlarmRelative(result.delay, result.period,
                        new InternalData(result.id));
            } else {
                var date = new Date(result.year, result.month, result.day,
                        result.hour, result.min, result.sec);

                return new AlarmAbsolute(date, result.second,
                        new InternalData(result.id));
            }
        }
    };

    AlarmManager.prototype.getAll = function () {
        var result = _callSync('AlarmManager_getAll', {});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            var data = C.getResultObject(result);
            var md = [];
            data.forEach(function (i) {
                if ('AlarmRelative'=== i.type) {
                    md.push(new AlarmRelative(i.delay, i.period,
                            new InternalData(i.id)));
                } else {
                    var date = new Date(i.year, i.month, i.day,
                            i.hour, i.min, i.sec);
                    md.push(new AlarmAbsolute(date, i.second,
                            new InternalData(i.id)));
                }
            });
            return md;
        }
    };

//  class Alarm //////////////////////////////////////////////////////////
    function Alarm(id) {
        var m_id = null;

        if (!T.isNullOrUndefined(id)) {
            m_id = Converter.toString(id);
        }

        Object.defineProperties(this, {
            id:    { value: m_id, writable: false, enumerable: true, configurable: true}
        });
    }
//  class AlarmRelative //////////////////////////////////////////////////

    function AlarmRelative(delay, period, internal) {
        AV.validateConstructorCall(this, AlarmRelative);

        var m_period = null;

        var m_delay = Converter.toLong(delay);

        if (arguments.length >= 2) {
            m_period = Converter.toLong(period, true);
        }
        if (internal instanceof InternalData) {
            Alarm.call(this, internal.id);
        }

        Object.defineProperties(this, {
            delay:     { value: m_delay, writable: false, enumerable: true},
            period:    { value: m_period, writable: false, enumerable: true}
        });
    }

    AlarmRelative.prototype = new Alarm();

    AlarmRelative.prototype.constructor = AlarmRelative;

    AlarmRelative.prototype.getRemainingSeconds = function () {
        var result = _callSync('AlarmRelative_getRemainingSeconds', {id: Number(this.id)});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            return Converter.toLong(C.getResultObject(result).seconds, true);
        }
    };

    function makeDateConst(obj) {
        console.logd('Enter MakeConst');
        obj.setDate = function() {};
        obj.setFullYear = function() {};
        obj.setHours = function() {};
        obj.setMilliseconds = function() {};
        obj.setMinutes = function() {};
        obj.setMonth = function() {};
        obj.setSeconds = function() {};
        obj.setTime = function() {};
        obj.setUTCDate = function() {};
        obj.setUTCFullYear = function() {};
        obj.setUTCHours = function() {};
        obj.setUTCMilliseconds = function() {};
        obj.setUTCMinutes = function() {};
        obj.setUTCMonth = function() {};
        obj.setUTCSeconds = function() {};
        obj.setYear = function() {};
        console.logd('Leave MakeConst');
    }

//  class AlarmAbsolute //////////////////////////////////////////////////

    function AlarmAbsolute(date, second, internal) {
        AV.validateConstructorCall(this, AlarmAbsolute);

        var m_period = null, m_daysOfWeek = [], m_date;

        if (T.isDate(date)) {
            m_date = date;
            if (arguments.length >= 2) {
                if(T.isArray(second)){
                    m_daysOfWeek = second;
                } else {
                    m_period = Converter.toLong(second);
                }
            }

            if (internal instanceof InternalData) {
                Alarm.call(this, internal.id);
            }
        } else {
            m_period = undefined;
        }
        makeDateConst(m_date);
        Object.defineProperties(this, {
            date:       { value: m_date, writable: false, enumerable: true},
            period:     { value: m_period, writable: false, enumerable: true},
            daysOfTheWeek: { value: m_daysOfWeek, writable: false, enumerable: true}
        });
    }

    AlarmAbsolute.prototype = new Alarm();

    AlarmAbsolute.prototype.constructor = AlarmAbsolute;

    AlarmAbsolute.prototype.getNextScheduledDate = function () {
        var result = _callSync('AlarmAbsolute_getNextScheduledDate', {id: Number(this.id)});

        if (C.isFailure(result)) {
            throw C.getErrorObject(result);
        } else {
            var d = C.getResultObject(result);
            if (T.isNull(d.year)) {
                return null;
            } else {
                var date = new Date(d.year, d.month, d.day, d.hour, d.min, d.sec);
                return date;
            }
        }
    };

//  exports //////////////////////////////////////////////////////////////
    module.exports = {
        alarm: { value: new AlarmManager(), writable: false, enumerable: true},
        AlarmRelative: { value: AlarmRelative, writable: false, enumerable: true},
        AlarmAbsolute: { value: AlarmAbsolute, writable: false, enumerable: true}
    };

})();
