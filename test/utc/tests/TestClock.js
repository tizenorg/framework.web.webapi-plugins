
/*
 *
 * Copyright (c) 2011 Samsung Electronics Co., Ltd All Rights Reserved
 * PROPRIETARY/CONFIDENTIAL
 *
 * This software is the confidential and proprietary information of SAMSUNG
 * ELECTRONICS ("Confidential Information"). You agree and acknowledge that
 * this software is owned by Samsung and you shall not disclose such
 * Confidential Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAMSUNG ELECTRONICS. SAMSUNG
 * make no representations or warranties about the suitability of the software,
 * either express or implied, including but not limited to the implied
 * warranties of merchantability, fitness for a particular purpose, or
 * non-infringement. SAMSUNG shall not be liable for any damages suffered by
 * licensee arising out of or related to this software.
 *
 */

/**
 *     TimeUtil UNIT test
 *    @author    sangtai.kim, jihwa.park
 */

//document.write('<script type="text/javascript" src="tests/Tizen/ClockSetting.js"></script>');
// hack to include file generated by another script
eval(require('fs').readFileSync(__dirname + '/tests/ClockSetting.js', 'utf-8')+ '');

var UNKNOWN_ERR = "UnknownError";
var TYPE_MISMATCH_ERR   = "TypeMismatchError";
var INVALID_VALUES_ERR   = "InvalidValuesError";
var NOT_FOUND_ERR       = "NotFoundError";
var PERMISSION_DENIED_ERR = "SecurityError";
var ERROR_STR = "Error";
var ERROR_NUM = 3;

var emptyFunction = function() {}

var expected_year       = 2011;
var expected_month      = 10;
var expected_date       = 11;
var expected_hours         = 4;
var expected_minutes    = 55;
var expected_seconds    = 54;
var expected_milliseconds = 12;
var expected_time_zone    = "Asia/Dubai";//GMT+4

var date = new tizen.TZDate(
                    expected_year,             //year
                    expected_month,             //month
                    expected_date,             //day
                    expected_hours,             //hours
                    expected_minutes,         //minutes
                    expected_seconds,         //seconds
                    expected_milliseconds,    //milliseconds
                    expected_time_zone        //timeZone
            );

// var currentDate = new tizen.TZDate();

function presenceTest()
{
    TestEngine.test("Checking tizen.time object", tizen.time);
}

function testTZDate_001() {
    try {
    var JSDate = new Date(expected_year,             //year
                    expected_month,             //month
                    expected_date,             //day
                    expected_hours,             //hours
                    expected_minutes,         //minutes
                    expected_seconds,         //seconds
                    expected_milliseconds    //milliseconds
                    );
    var date1 = new tizen.TZDate();
    var date2 = new tizen.TZDate(null, null);
    var date2_1 = new tizen.TZDate(null);
    var date2_2 = new tizen.TZDate(undefined, undefined);
    var date2_3 = new tizen.TZDate(undefined);
    var date3 = new tizen.TZDate(JSDate);
    var date3_1 = new tizen.TZDate(JSDate, null);
    var date3_2 = new tizen.TZDate(JSDate, undefined);
    var date4 = new tizen.TZDate(null, expected_time_zone);
    var date5 = new tizen.TZDate(JSDate, expected_time_zone);
    var date6 = new tizen.TZDate(expected_year, expected_month, expected_date);
    var date7 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours);
    var date8 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes);
    var date9 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds);
    var date10 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds);
    var date11 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    var date12 = new tizen.TZDate(expected_year, expected_month, expected_date, null, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    var date13 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, null, expected_seconds, expected_milliseconds, expected_time_zone);
    var date14 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, null, expected_milliseconds, expected_time_zone);
    var date15 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, null, expected_time_zone);
    var date16 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, null);
    var date17 = new tizen.TZDate(expected_year, expected_month, expected_date, undefined, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    var date18 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, undefined, expected_seconds, expected_milliseconds, expected_time_zone);
    var date19 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, undefined, expected_milliseconds, expected_time_zone);
    var date20 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, undefined, expected_time_zone);
    var date21 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, undefined);
    var date22 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone, ERROR_NUM);
    var date23 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone, null);
    var date24 = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone, undefined);

    TestEngine.test("testTZDate_001() new tizen.TZDate():", date1 instanceof tizen.TZDate);
    TestEngine.test("testTZDate_001() new tizen.TZDate(null, null):", date2 instanceof tizen.TZDate);
    TestEngine.test("testTZDate_001() new tizen.TZDate(null):", date2_1 instanceof tizen.TZDate);
    TestEngine.test("testTZDate_001() new tizen.TZDate(undefined, undefined):", date2_2 instanceof tizen.TZDate);
    TestEngine.test("testTZDate_001() new tizen.TZDate(undefined):", date2_3 instanceof tizen.TZDate);
    TestEngine.test("testTZDate_001() new tizen.TZDate(JSDate) equals to new tizen.TZDate(JSDate, null):", date3.equalsTo(date3_1));
    TestEngine.test("testTZDate_001() new tizen.TZDate(JSDate) equals to new tizen.TZDate(JSDate, undefined):", date3.equalsTo(date3_2));
    checkTZDate(7, date3, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds);
    checkTZDate(1, date4, expected_time_zone);
    TestEngine.test("testTZDate_001() new tizen.TZDate(JSDate, expected_time_zone) equals to date:", date5.equalsTo(date));
    checkTZDate(8, date5, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    checkTZDate(3, date6, expected_year, expected_month, expected_date);
    checkTZDate(4, date7, expected_year, expected_month, expected_date, expected_hours);
    checkTZDate(5, date8, expected_year, expected_month, expected_date, expected_hours, expected_minutes);
    checkTZDate(6, date9, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds);
    checkTZDate(7, date10, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds);
    checkTZDate(8, date11, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date12, expected_year, expected_month, expected_date, 0, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date13, expected_year, expected_month, expected_date, expected_hours, 0, expected_seconds, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date14, expected_year, expected_month, expected_date, expected_hours, expected_minutes, 0, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date15, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, 0, expected_time_zone);
    checkTZDate(7, date16, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds);
    checkTZDate(8, date17, expected_year, expected_month, expected_date, 0, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date18, expected_year, expected_month, expected_date, expected_hours, 0, expected_seconds, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date19, expected_year, expected_month, expected_date, expected_hours, expected_minutes, 0, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date20, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, 0, expected_time_zone);
    checkTZDate(7, date21, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds);
    checkTZDate(8, date22, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date23, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);
    checkTZDate(8, date24, expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, expected_time_zone);

    } catch(e) {
        logError("testTZDate_001 error name:"+ e.name + ",message :" + e.message);
    }
}

function checkTZDate(count, paramTZDate, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    TestEngine.test("checkTZDate() paramTZDate):", paramTZDate instanceof tizen.TZDate);
    if (count == 0)
        return;

    switch (count) {
        case 1:
            TestEngine.assertEqual("checkTZDate() timezone", arg1, paramTZDate.getTimezone());
            break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
            TestEngine.assertEqual("checkTZDate() year", arg1, paramTZDate.getFullYear());
            TestEngine.assertEqual("checkTZDate() month", arg2, paramTZDate.getMonth());
            TestEngine.assertEqual("checkTZDate() date", arg3, paramTZDate.getDate());
            if (count > 3)
                TestEngine.assertEqual("checkTZDate() hours", arg4, paramTZDate.getHours());
            if (count > 4)
                TestEngine.assertEqual("checkTZDate() minutes", arg5, paramTZDate.getMinutes());
            if (count > 5)
                TestEngine.assertEqual("checkTZDate() seconds", arg6, paramTZDate.getSeconds());
            if (count > 6)
                TestEngine.assertEqual("checkTZDate() milliseconds", arg7, paramTZDate.getMilliseconds());
            if (count > 7)
                TestEngine.assertEqual("checkTZDate() timezone", arg8, paramTZDate.getTimezone());
            break;
    }
}

function checkValidParamTZDate() {
    var invalidDate = null;
    var validDate = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds);

    try {
        invalidDate = new tizen.TZDate(ERROR_NUM);
        TestEngine.test("checkValidParamTZDate() new tizen.TZDate(ERROR_NUM) isTZDate?", invalidDate instanceof tizen.TZDate);
        TestEngine.test("checkValidParamTZDate() new tizen.TZDate(ERROR_NUM) invalidDate.toString() != 'Invalid Date'", invalidDate.toString() != "Invalid Date");
        TestEngine.assertEqual("checkValidParamTZDate() new tizen.TZDate(ERROR_NUM) invalidDate.getTimezone()==validDate.getTimezone()", invalidDate.getTimezone(), validDate.getTimezone());
    } catch (e) {
        logError("checkValidParamTZDate() new tizen.TZDate(ERROR_NUM) error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidDate = new tizen.TZDate(new Date(-2000, 0, 0));
        TestEngine.test("checkValidParamTZDate() new tizen.TZDate(new Date(-2000, 0, 0)) isTZDate?", invalidDate instanceof tizen.TZDate);
        TestEngine.test("checkValidParamTZDate() new tizen.TZDate(new Date(-2000, 0, 0)) invalidDate.toString() != 'Invalid Date'", invalidDate.toString() != "Invalid Date");
        TestEngine.assertEqual("checkValidParamTZDate() new tizen.TZDate(new Date(-2000, 0, 0)) invalidDate.getTimezone()==validDate.getTimezone()", invalidDate.getTimezone(), validDate.getTimezone());
    } catch (e) {
        logError("checkValidParamTZDate() new tizen.TZDate(new Date(-2000, 0, 0)) error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidDate = new tizen.TZDate(new Date(), ERROR_NUM);
        TestEngine.test("checkValidParamTZDate() new tizen.TZDate(new Date(), ERROR_NUM) isTZDate?", invalidDate instanceof tizen.TZDate);
        TestEngine.test("checkValidParamTZDate() new tizen.TZDate(new Date(), ERROR_NUM) invalidDate.toString() != 'Invalid Date'", invalidDate.toString() != "Invalid Date");
        TestEngine.assertEqual("checkValidParamTZDate() new tizen.TZDate(new Date(), ERROR_NUM) invalidDate.getTimezone()==validDate.getTimezone()", invalidDate.getTimezone(), validDate.getTimezone());
    } catch (e) {
        logError("checkValidParamTZDate() new tizen.TZDate(new Date(), ERROR_NUM) error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidDate = new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds,  ERROR_NUM);
        compareDate(validDate, invalidDate, validDate.getTimezone());
    } catch (e) {
        TestEngine.assertEqual("checkValidParamTZDate() new tizen.TZDate(expected_year, expected_month, expected_date, expected_hours, expected_minutes, expected_seconds, expected_milliseconds, ERROR_NUM) error", e.name, INVALID_VALUES_ERR);
    }
}

function testTZDate_002() {
    var date1 = new Date(0, 0, 0);
    var date2 = new Date(30, 4, 1, 17, 20, 30, 769);
    
    var tzdate1 = new tizen.TZDate(date1, "Europe/London");
    compareDate(date1, tzdate1, "Europe/London");
    var tzdate2 = new tizen.TZDate(date1);
    compareDate(date1, tzdate2);
    var tzdate3 = new tizen.TZDate(date2, "Europe/London");
    compareDate(date2, tzdate3, "Europe/London");
    var tzdate4 = new tizen.TZDate(date2);
    compareDate(date2, tzdate4);

}

function compareDate(date, tzdate, timezone) {
    TestEngine.assertEqual("compareDate() year", date.getFullYear(), tzdate.getFullYear());
    TestEngine.assertEqual("compareDate() month", date.getMonth(), tzdate.getMonth());
    TestEngine.assertEqual("compareDate() day", date.getDate(), tzdate.getDate());
    TestEngine.assertEqual("compareDate() hours", date.getHours(), tzdate.getHours());
    TestEngine.assertEqual("compareDate() mins", date.getMinutes(), tzdate.getMinutes());
    TestEngine.assertEqual("compareDate() sec", date.getSeconds(), tzdate.getSeconds());
    TestEngine.assertEqual("compareDate() millisec", date.getMilliseconds(), tzdate.getMilliseconds());
    if (!isUndefined(timezone))
        TestEngine.assertEqual("compareDate() timezone", timezone, tzdate.getTimezone());
}

function testTimeDuration() {
    var duration1 = new tizen.TimeDuration(20, "MSECS");
    var duration2 = new tizen.TimeDuration(30, "SECS");
    var duration3 = new tizen.TimeDuration(20, "MINS");
    var duration4 = new tizen.TimeDuration(30, "HOURS");
    var duration5 = new tizen.TimeDuration(20, "DAYS");
    var duration6 = new tizen.TimeDuration(20);
    var duration7 = new tizen.TimeDuration(20, null);
    var duration8 = new tizen.TimeDuration(20, undefined);
    var duration9 = new tizen.TimeDuration(20, "DAYS", ERROR_NUM);
    var duration10 = new tizen.TimeDuration(20, "DAYS", null);
    var duration11 = new tizen.TimeDuration(20, "DAYS", undefined);

    checkTimeDuration(duration1, 20, "MSECS");
    checkTimeDuration(duration2, 30, "SECS");
    checkTimeDuration(duration3, 20, "MINS");
    checkTimeDuration(duration4, 30, "HOURS");
    checkTimeDuration(duration5, 20, "DAYS");
    checkTimeDuration(duration6, 20, null);
    checkTimeDuration(duration7, 20, null);
    checkTimeDuration(duration8, 20, null);
    checkTimeDuration(duration9, 20, "DAYS");
    checkTimeDuration(duration10, 20, "DAYS");
    checkTimeDuration(duration11, 20, "DAYS");

    duration1.length = duration2.length;
    duration1.unit = duration2.unit;
    checkTimeDuration(duration1, duration2.length, duration2.unit);
}

function checkTimeDuration(duration, expected_length, expected_unit) {
    TestEngine.test("checkTimeDuration() duration instanceof tizen.TimeDuration :", duration instanceof tizen.TimeDuration);
    if (isNull(expected_unit))
        expected_unit = "MSECS";

    TestEngine.testPresence2(duration, "length");
    TestEngine.testPresence2(duration, "unit");
    TestEngine.assertEqual("checkTimeDuration() length", expected_length, duration.length);
    TestEngine.assertEqual("checkTimeDuration() unit", expected_unit, duration.unit);
}

function checkValidParamTimeDuration(args) {
    var defaultLength = 0;
    var defaultUnit = "MSECS";
    var invalidTimeDuration = null;
    try {
        invalidTimeDuration = new tizen.TimeDuration(ERROR_STR);
        checkTimeDuration(invalidTimeDuration, defaultLength, defaultUnit);
    } catch (e) {
        logError("checkValidParamTimeDuration() new tizen.TimeDuration(ERROR_STR) error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidTimeDuration = new tizen.TimeDuration(null);
        checkTimeDuration(invalidTimeDuration, defaultLength, defaultUnit);
    } catch (e) {
        logError("checkValidParamTimeDuration() new tizen.TimeDuration(null) error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidTimeDuration = new tizen.TimeDuration(undefined);
        checkTimeDuration(invalidTimeDuration, defaultLength, defaultUnit);
    } catch (e) {
        logError("checkValidParamTimeDuration() new tizen.TimeDuration(undefined) error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidTimeDuration = new tizen.TimeDuration(ERROR_STR, "SECS");
        checkTimeDuration(invalidTimeDuration, defaultLength, "SECS");
    } catch (e) {
        logError("checkValidParamTimeDuration() new tizen.TimeDuration(ERROR_STR, 'SECS') error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidTimeDuration = new tizen.TimeDuration(undefined, "SECS");
        checkTimeDuration(invalidTimeDuration, defaultLength, "SECS");
    } catch (e) {
        logError("checkValidParamTimeDuration() new tizen.TimeDuration(undefined, 'SECS') error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidTimeDuration = new tizen.TimeDuration(null, "SECS");
        checkTimeDuration(invalidTimeDuration, defaultLength, "SECS");
    } catch (e) {
        logError("checkValidParamTimeDuration() new tizen.TimeDuration(null, 'SECS') error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidTimeDuration = new tizen.TimeDuration(20, "MINUTES");
        checkTimeDuration(invalidTimeDuration, 20, defaultUnit);
    } catch (e) {
        logError("checkValidParamTimeDuration() new tizen.TimeDuration(20, 'MINUTES') error"+ e.name + ",message :" + e.message);
    }

    try {
        invalidTimeDuration = new tizen.TimeDuration(20, ERROR_NUM);
        checkTimeDuration(invalidTimeDuration, 20, defaultUnit);
    } catch (e) {
        logError("checkValidParamTimeDuration() new tizen.TimeDuration(20, ERROR_NUM) error"+ e.name + ",message :" + e.message);
    }
}

function testGetCurrentDateTime(){
    var current_dt = tizen.time.getCurrentDateTime();
    TestEngine.test("testGetCurrentDateTime() date:", current_dt  instanceof tizen.TZDate);
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetCurrentDateTime() date:", tizen.time.getCurrentDateTime(testAdditionalParamArray[i])  instanceof tizen.TZDate);
     }
 }
/*
function testsetCurrentDateTime(){
    try {
        tizen.time.setCurrentDateTime(new tizen.TZDate(2011, 11, 10, 3, 45, 4));
        var current_dt = tizen.time.getCurrentDateTime();
        TestEngine.assertEqual("testGetCurrentDateTime() get year", 2011, current_dt.getFullYear());

        var testAdditionalParamArray = [ERROR_NUM, null, undefined];
        for(var i=0; i<testAdditionalParamArray.length; i++){
            tizen.time.setCurrentDateTime(new tizen.TZDate(2011, 11, 10, 3, 45, 4), testAdditionalParamArray[i]);
            var current_dt = tizen.time.getCurrentDateTime();
            TestEngine.assertEqual("testGetCurrentDateTime() get year", 2011, current_dt.getFullYear());
         }
    } catch (e) {
        TestEngine.test("testGetCurrentDateTime() expected exception:" + e.name, true);
    }
}

function testsetCurrentDateTime_N(){
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setCurrentDateTime", ERROR_NUM);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setCurrentDateTime", null);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setCurrentDateTime", undefined);
}
*/
function testGetLocalTimeZone(){
    var timeZone = tizen.time.getLocalTimezone();
    //var expectedTimeZone = "Asia/Seoul";

    TestEngine.log(timeZone);
    TestEngine.test("testGetLocalTimeZone() ", isString(timeZone));
    if (expectedLocalTimeZone != "TZID")
        TestEngine.assertEqual("testGetLocalTimeZone() ", expectedLocalTimeZone, timeZone);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var timeZone = tizen.time.getLocalTimezone(testAdditionalParamArray[i]);
        TestEngine.test("testGetLocalTimeZone() ", isString(timeZone));
        if (expectedLocalTimeZone != "TZID")
            TestEngine.assertEqual("testGetLocalTimeZone() ", expectedLocalTimeZone, timeZone);
     }
}

function testGetAvailableTimeZones(){
    var timeZones = tizen.time.getAvailableTimezones();

    TestEngine.test("testGetAvailableTimeZones() ", isArray(timeZones));
    TestEngine.log("timeZones.length:" + timeZones.length);

    timeZones.forEach(function(tz) {
         TestEngine.log("timeZones:[" + tz + "]");
    });

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var timeZones = tizen.time.getAvailableTimezones(testAdditionalParamArray[i]);
        TestEngine.test("testGetAvailableTimeZones() ", isArray(timeZones));
    }
}

function testGetDateFormat() {
    var defaultDateFormat = tizen.time.getDateFormat();

    //var expectedDefaultDateFormat = "D, M d, y";
    //var expectedShortDateFormat = "m/d/y";

    TestEngine.test("testGetDateFormat() ", isString(defaultDateFormat));

    var shortDateFormat = tizen.time.getDateFormat(null);
    TestEngine.test("testGetDateFormat() ", isString(shortDateFormat));

    var shortDateFormat1 = tizen.time.getDateFormat(undefined);
    TestEngine.test("testGetDateFormat() ", isString(shortDateFormat1));

    var shortDateFormat2 = tizen.time.getDateFormat(true);
    TestEngine.test("testGetDateFormat() ", isString(shortDateFormat2));

    var notShortDateFormat = tizen.time.getDateFormat(false);
    TestEngine.test("testGetDateFormat() ", isString(notShortDateFormat));

    if (expectedLocalTimeZone != "TZID") {
        TestEngine.assertEqual("testGetDateFormat() ", expectedDefaultDateFormat, defaultDateFormat);
        TestEngine.assertEqual("testGetDateFormat() ", expectedDefaultDateFormat, shortDateFormat);
        TestEngine.assertEqual("testGetDateFormat() ", expectedDefaultDateFormat, shortDateFormat1);
        TestEngine.assertEqual("testGetDateFormat() ", expectedShortDateFormat, shortDateFormat2);
        TestEngine.assertEqual("testGetDateFormat() ", expectedDefaultDateFormat, notShortDateFormat);
    }


    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var notShortDateFormat = tizen.time.getDateFormat(false, testAdditionalParamArray[i]);
        TestEngine.test("testGetDateFormat() ", isString(notShortDateFormat));
        if (expectedLocalTimeZone != "TZID")
            TestEngine.assertEqual("testGetDateFormat() ", expectedDefaultDateFormat, notShortDateFormat);
    }
}

function testGetTimeFormat() {

    var defaultTimeFormat = tizen.time.getTimeFormat();
    TestEngine.test("testGetTimeFormat() ", isString(defaultTimeFormat));
    if (expectedLocalTimeZone != "TZID") {
        if ((expectedDefaultTimeFormat_12 == defaultTimeFormat)||(expectedDefaultTimeFormat_24 == defaultTimeFormat)) {
            TestEngine.test("testGetTimeFormat() defaultTimeFormat", true);
        } else {
            TestEngine.test("testGetTimeFormat() defaultTimeFormat", false);
        }
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var defaultTimeFormat = tizen.time.getTimeFormat(testAdditionalParamArray[i]);
        TestEngine.test("testGetTimeFormat() ", isString(defaultTimeFormat));
        if (expectedLocalTimeZone != "TZID") {
            if ((expectedDefaultTimeFormat_12 == defaultTimeFormat)||(expectedDefaultTimeFormat_24 == defaultTimeFormat)) {
                TestEngine.test("testGetTimeFormat() defaultTimeFormat", true);
            } else {
                TestEngine.test("testGetTimeFormat() defaultTimeFormat", false);
            }
        }
    }
}

function testIsLeapYear() {
    var leapYear    = 2012;
    TestEngine.assertEqual("testIsLeapYear() leapYear",    true, tizen.time.isLeapYear(leapYear));
}

function testIsLeapYear_N() {
    var notLeapYear = 2013;
    TestEngine.assertEqual("testIsLeapYear() notLeapYear", false, tizen.time.isLeapYear(notLeapYear));
}

function testTimeDurationDifference(){
    var durationA = new tizen.TimeDuration(2, "DAYS");
    var durationB = new tizen.TimeDuration(96, "HOURS");
    var diff = durationB.difference(durationA);

    checkTimeDuration(diff, 2, "DAYS");
}

function testTimeDurationDifference_N(){
    var durationA = new tizen.TimeDuration(2, "DAYS");
    var durationB = new tizen.TimeDuration(96, "HOURS");
    var diff = durationB.difference(durationA);

    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, durationB, "difference");

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var diff = durationB.difference(durationA, testAdditionalParamArray[i]);
        checkTimeDuration(diff, 2, "DAYS");
        TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, durationB, "difference", testAdditionalParamArray[i]);
    }
}

function testTimeDurationEqualsTo(){
    var durationA = new tizen.TimeDuration(2, "DAYS");
    var durationB = new tizen.TimeDuration(47, "HOURS");
    var durationC = new tizen.TimeDuration(2880, "MINS");

    TestEngine.test("testTimeDurationEqualsTo() durationB.equalsTo(durationA)", durationB.equalsTo(durationA) == false);
    TestEngine.test("testTimeDurationEqualsTo() durationA.equalsTo(durationC)", durationA.equalsTo(durationC) == true);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testTimeDurationEqualsTo() durationA.equalsTo(durationC, testAdditionalParamArray[i])", durationA.equalsTo(durationC, testAdditionalParamArray[i]) == true);
    }
}

function testTimeDurationEqualsTo_N(){
    var durationA = new tizen.TimeDuration(2, "DAYS");
    var durationB = new tizen.TimeDuration(47, "HOURS");
    var durationC = new tizen.TimeDuration(2880, "MINS");

    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, durationB, "equalsTo");

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, durationB, "equalsTo", testAdditionalParamArray[i]);
    }
}

function testTimeDurationLessThan(){
    var durationA = new tizen.TimeDuration(2, "DAYS");
    var durationB = new tizen.TimeDuration(50, "HOURS");
    var durationC = new tizen.TimeDuration(2880, "MINS");

    TestEngine.test("testTimeDurationLessThan() durationB.lessThan(durationA)", durationB.lessThan(durationA) == false);
    TestEngine.test("testTimeDurationLessThan() durationA.lessThan(durationB)", durationA.lessThan(durationB) == true);
    TestEngine.test("testTimeDurationLessThan() durationA.lessThan(durationA)", durationA.lessThan(durationC) == false);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testTimeDurationLessThan() durationA.lessThan(durationC, testAdditionalParamArray[i])", durationA.lessThan(durationC, testAdditionalParamArray[i]) == false);
    }
}

function testTimeDurationLessThan_N(){
    var durationA = new tizen.TimeDuration(2, "DAYS");
    var durationB = new tizen.TimeDuration(50, "HOURS");
    var durationC = new tizen.TimeDuration(2880, "MINS");

    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, durationB, "lessThan");

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, durationB, "lessThan", testAdditionalParamArray[i]);
    }
}

function testTimeDurationGreaterThan(){
    var durationA = new tizen.TimeDuration(2, "DAYS");
    var durationB = new tizen.TimeDuration(50, "HOURS");
    var durationC = new tizen.TimeDuration(2880, "MINS");

    TestEngine.test("testTimeDurationGreaterThan() durationB.greaterThan(durationA)", durationB.greaterThan(durationA) == true);
    TestEngine.test("testTimeDurationGreaterThan() durationA.greaterThan(durationB)", durationA.greaterThan(durationB) == false);
    TestEngine.test("testTimeDurationGreaterThan() durationA.greaterThan(durationA)", durationA.greaterThan(durationC) == false);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testTimeDurationGreaterThan() durationA.greaterThan(durationC, testAdditionalParamArray[i])", durationA.greaterThan(durationC, testAdditionalParamArray[i]) == false);
    }
}

function testTimeDurationGreaterThan_N(){
    var durationA = new tizen.TimeDuration(2, "DAYS");
    var durationB = new tizen.TimeDuration(50, "HOURS");
    var durationC = new tizen.TimeDuration(2880, "MINS");

    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, durationB, "greaterThan");

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, durationB, "greaterThan", testAdditionalParamArray[i]);
    }
}

function testGetDate()
{
    TestEngine.test("testGetDate() date:",            isNumber(date.getDate()));
    TestEngine.test("testGetDate() date value",     date.getDate()==expected_date);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetDate() date:",            isNumber(date.getDate(testAdditionalParamArray[i])));
        TestEngine.test("testGetDate() date value",     date.getDate(testAdditionalParamArray[i])==expected_date);
    }
}

function testGetDay()
{
    var day_min = 0;     //Sunday
    var day_max = 6;    //Saturday

    TestEngine.test("testGetDay() day type:",                    isNumber(date.getDay()));
    TestEngine.test("testGetDay() day value test Minimum",     day_min <= date.getDay());
    TestEngine.test("testGetDay() day value test Maximum",     day_max >= date.getDay());

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetDay() day:",            isNumber(date.getDay(testAdditionalParamArray[i])));
        TestEngine.test("testGetDay() day value",     date.getDay(testAdditionalParamArray[i])==date.getDay());
    }
}

function testGetFullYear()
{
    TestEngine.test("testGetFullYear() year type:",        isNumber(date.getFullYear()));
    TestEngine.test("testGetFullYear() year value",     date.getFullYear() == expected_year);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetFullYear() year:",            isNumber(date.getFullYear(testAdditionalParamArray[i])));
        TestEngine.test("testGetFullYear() year value",     date.getFullYear(testAdditionalParamArray[i])==expected_year);
    }
}

function testGetHours()
{
    var min_hour = 0;
    var max_hour = 23;

    TestEngine.test("testGetHours() Hour type:",        isNumber(date.getHours()));

    TestEngine.test("testGetHours() Hour value test Minimum",     min_hour <= date.getHours());
    TestEngine.test("testGetHours() Hour value test Maximum",     max_hour >= date.getHours());

    TestEngine.test("testGetHours() Hour value",     date.getHours()==expected_hours);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetHours() Hour:",            isNumber(date.getHours(testAdditionalParamArray[i])));
        TestEngine.test("testGetHours() Hour value",     date.getHours(testAdditionalParamArray[i])==expected_hours);
    }
}

function testGetMilliseconds()
{
    var min_millisecond = 0;
    var max_millisecond = 999;

    TestEngine.test("testGetMilliseconds() Millisecond type:",        isNumber(date.getMilliseconds()));

    TestEngine.test("testGetMilliseconds() Millisecond value test Minimum",     min_millisecond <= date.getMilliseconds());
    TestEngine.test("testGetMilliseconds() Millisecond value test Maximum",     max_millisecond >= date.getMilliseconds());

    TestEngine.test("testGetMilliseconds() Millisecond value",     date.getMilliseconds()==expected_milliseconds);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetMilliseconds() Millisecond:",            isNumber(date.getMilliseconds(testAdditionalParamArray[i])));
        TestEngine.test("testGetMilliseconds() Millisecond value",     date.getMilliseconds(testAdditionalParamArray[i])==expected_milliseconds);
    }
}

function testGetMinute()
{
    var min_minute = 0;
    var max_minute = 59;

    TestEngine.test("testGetMinute() Minute type:",        isNumber(date.getMinutes()));

    TestEngine.test("testGetMinute() Minute value test Minimum",     min_minute <= date.getMinutes());
    TestEngine.test("testGetMinute() Minute value test Maximum",     max_minute >= date.getMinutes());

    TestEngine.test("testGetMinute() Minute value",     date.getMinutes()==expected_minutes);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetMinute() Minute:",            isNumber(date.getMinutes(testAdditionalParamArray[i])));
        TestEngine.test("testGetMinute() Minute value",     date.getMinutes(testAdditionalParamArray[i])==expected_minutes);
    }
}

function testGetMonth()
{
    var min_month = 0;
    var max_month = 11;

    TestEngine.test("testGetMonth() Month type:",        isNumber(date.getMonth()));

    TestEngine.test("testGetMonth() Month value test Minimum",     min_month <= date.getMonth());
    TestEngine.test("testGetMonth() Month value test Maximum",     max_month >= date.getMonth());

    TestEngine.test("testGetMonth() Month value",     date.getMonth()==expected_month);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetMonth() Month:",            isNumber(date.getMonth(testAdditionalParamArray[i])));
        TestEngine.test("testGetMonth() Month value",     date.getMonth(testAdditionalParamArray[i])==expected_month);
    }
}

function testGetSeconds()
{
    var min_second = 0;
    var max_second = 59;

    TestEngine.test("testGetSeconds() Second type:",        isNumber(date.getSeconds()));

    TestEngine.test("testGetSeconds() Second value test Minimum",     min_second <= date.getSeconds());
    TestEngine.test("testGetSeconds() Second value test Maximum",     max_second >= date.getSeconds());

    TestEngine.test("testGetSeconds() Second value",     date.getSeconds()==expected_seconds);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.test("testGetSeconds() Second:",            isNumber(date.getSeconds(testAdditionalParamArray[i])));
        TestEngine.test("testGetSeconds() Second value",     date.getSeconds(testAdditionalParamArray[i])==expected_seconds);
    }
}

function testSetDate()
{
    var tmpDate = new tizen.TZDate(2000, 4, 3);
    var cmpDate = new Date(2000, 4, 3);

    var testDataArray          = [1, 12, 21, 30, 31];
    var testInvalidDataArray   = [-1, 32, 123];
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];

    var testName = "testSetDate()";
    var testFunctionName = "setDate";

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setDate(testDataArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i], tmpDate.getDate() == testDataArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i], true);
    }

    for (var i=0; i<testAdditionalParamArray.length; i++) {
        tmpDate.setDate(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i], tmpDate.getDate() == testDataArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i], true);
    }

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setDate(testInvalidDataArray[i]);
        cmpDate.setDate(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getDate() == cmpDate.getDate());
    }
}

function testSetFullYear() {
    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [2011, 1921, 2012];
    var testInvalidDataArray   = [12345, 23];
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setFullYear(testDataArray[i]);
        TestEngine.test("testSetFullYear() data value " + testDataArray[i], tmpDate.getFullYear() == testDataArray[i]);
    }

    for (var i=0; i<testAdditionalParamArray.length; i++) {
        tmpDate.setFullYear(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.test("testSetFullYear() data value " + testDataArray[i], tmpDate.getFullYear() == testDataArray[i]);
    }

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setFullYear(testInvalidDataArray[i]);
        cmpDate.setFullYear(testInvalidDataArray[i]);
        TestEngine.test("testSetFullYear()  data value " + testInvalidDataArray[i] + "(1)" + tmpDate.getFullYear() + "(2)" + cmpDate.getFullYear(), tmpDate.getFullYear() == cmpDate.getFullYear());
    }
}

function testSetHours() {
    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 1, 12, 23];
    var testInvalidDataArray   = [-1, 24];
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setHours(testDataArray[i]);
        TestEngine.test("testSetHours() data value " + testDataArray[i], tmpDate.getHours() == testDataArray[i]);
    }

    for (var i=0; i<testAdditionalParamArray.length; i++) {
        tmpDate.setHours(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.test("testSetHours() data value " + testDataArray[i], tmpDate.getHours() == testDataArray[i]);
    }

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setHours(testInvalidDataArray[i]);
        cmpDate.setHours(testInvalidDataArray[i]);
        TestEngine.test("testSetHours() data value " + testInvalidDataArray[i], tmpDate.getHours() == cmpDate.getHours());
    }
}

function testSetMilliseconds()
{
    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 12, 332, 999];
    var testInvalidDataArray   = [-1, 1000, 1234];
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];

    var testName = "testSetMilliseconds()";
    var testFunctionName = "setMilliseconds";

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setMilliseconds(testDataArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i], tmpDate.getMilliseconds() == testDataArray[i]);
    }

    for (var i=0; i<testAdditionalParamArray.length; i++) {
        tmpDate.setMilliseconds(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.test(testName + " data value" + testDataArray[i], tmpDate.getMilliseconds() == testDataArray[i]);
    }

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setMilliseconds(testInvalidDataArray[i]);
        cmpDate.setMilliseconds(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getMilliseconds() == cmpDate.getMilliseconds());
    }

}

function testSetMinutes () {
    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 1, 57, 59];
    var testInvalidDataArray   = [-1, 60, 1234];
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];

    var testName          = "testSetMinutes()";
    var testFunctionName  = "setMinutes";

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setMinutes(testDataArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i], tmpDate.getMinutes() == testDataArray[i]);
    }

    for (var i=0; i<testAdditionalParamArray.length; i++) {
        tmpDate.setMinutes(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.test(testName + " data value" + testDataArray[i], tmpDate.getMinutes() == testDataArray[i]);
    }

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setMinutes(testInvalidDataArray[i]);
        cmpDate.setMinutes(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getMinutes() == cmpDate.getMinutes());
    }
}

function testSetMonth() {
      var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 1, 5, 11];
    var testInvalidDataArray   = [-1, 12, 20];
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];

    var testName          = "testSetMonth()";
    var testFunctionName  = "setMonth";

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setMonth(testDataArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i] + " : " + tmpDate.getMonth(), tmpDate.getMonth() == testDataArray[i]);
    }

    for (var i=0; i<testAdditionalParamArray.length; i++) {
        tmpDate.setMonth(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i] + " : " + tmpDate.getMonth(), tmpDate.getMonth() == testDataArray[i]);
    }

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setMonth(testInvalidDataArray[i]);
        cmpDate.setMonth(testInvalidDataArray[i]);
        TestEngine.test(testName + "  data value " + testInvalidDataArray[i] + "(1)" + tmpDate.getMonth() + "(2)" + cmpDate.getMonth(), tmpDate.getMonth() == cmpDate.getMonth());
    }
}

function testSetSeconds() {
      var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 1, 22, 59];
    var testInvalidDataArray   = [-1, 60, 70];
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];

    var testName          = "testSetSeconds()";
    var testFunctionName  = "setSeconds";

    for(var i=0; i<testAdditionalParamArray.length; i++){
        tmpDate.setSeconds(testDataArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i], tmpDate.getSeconds() == testDataArray[i]);
    }

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setSeconds(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.test(testName + " data value " + testDataArray[i], tmpDate.getSeconds() == testDataArray[i]);
    }

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setSeconds(testInvalidDataArray[i]);
        cmpDate.setSeconds(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getSeconds() == cmpDate.getSeconds());
    }
}

function testGetUTCDate(){
    var testName          = "testGetUTCDate()";

    var minData = 1;
    var maxData = 31;
    var expectedUTCDate = 11;

    TestEngine.log(date.getUTCDate());
    TestEngine.test(testName + "isNumber:",        isNumber(date.getUTCDate()));

    TestEngine.test(testName + "test Minimum",     minData <= date.getUTCDate());
    TestEngine.test(testName + "test Maximum",     maxData >= date.getUTCDate());

    TestEngine.assertEqual(testName + "value",     expectedUTCDate, date.getUTCDate());

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName + "value",     expectedUTCDate, date.getUTCDate(testAdditionalParamArray[i]));
    }

}

function testSetUTCDate() {
    var testName          = "testSetUTCDate()";

    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [1, 1, 22, 31];

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setUTCDate(testDataArray[i]);
        cmpDate.setUTCDate(testDataArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], cmpDate.getUTCDate(), tmpDate.getUTCDate());
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        tmpDate.setUTCDate(testDataArray[i], testAdditionalParamArray[i]);
        cmpDate.setUTCDate(testDataArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], cmpDate.getUTCDate(), tmpDate.getUTCDate());
    }

    var testInvalidDataArray   = [-1, 60, 70];
    var testFunctionName  = "setUTCDate";

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setUTCDate(testInvalidDataArray[i]);
        cmpDate.setUTCDate(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getUTCDate() == cmpDate.getUTCDate());
    }
}

function testGetUTCDay(){
    var testName          = "testGetUTCDay()";

    var minData = 0;
    var maxData = 6;
    var expectedValue = 5;

    TestEngine.log(date.getUTCDay());
    TestEngine.test(testName + "isNumber:",        isNumber(date.getUTCDay()));

    TestEngine.test(testName + "test Minimum",     minData <= date.getUTCDay());
    TestEngine.test(testName + "test Maximum",     maxData >= date.getUTCDay());

    TestEngine.assertEqual(testName + " value",     expectedValue, date.getUTCDay());

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName + "value",     expectedValue, date.getUTCDay(testAdditionalParamArray[i]));
    }
}

function testGetUTCFullYear(){
    var testName          = "testGetUTCFullYear()";

    TestEngine.test(testName + " year type:",        isNumber(date.getUTCFullYear()));
    TestEngine.test(testName + " year value",     date.getUTCFullYear() == expected_year);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName + "value",     expected_year, date.getUTCFullYear(testAdditionalParamArray[i]));
    }
}

function testSetUTCFullYear(){
    var testName = "testSetUTCFullYear()";

    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [1999, 1234, 2011, 2012];
    var testInvalidDataArray   = [12345, 23];
    var testFunctionName  = "setUTCFullYear";

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setUTCFullYear(testDataArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCFullYear());
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        tmpDate.setUTCFullYear(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCFullYear());
    }

    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setUTCFullYear(testInvalidDataArray[i]);
        cmpDate.setUTCFullYear(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getUTCFullYear() == cmpDate.getUTCFullYear());
    }
}

function testGetUTCHours(){
    var testName          = "testGetUTCHours()";

    var minData = 0;
    var maxData = 23;
    var expectedUTCDate = 0;

    TestEngine.log(date.getUTCDate());
    TestEngine.test(testName + "isNumber:",        isNumber(date.getUTCHours()));

    TestEngine.test(testName + "test Minimum",     minData <= date.getUTCHours());
    TestEngine.test(testName + "test Maximum",     maxData >= date.getUTCHours());

    TestEngine.assertEqual(testName + "value",     expectedUTCDate, date.getUTCHours());
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName + "value",     expectedUTCDate, date.getUTCHours(testAdditionalParamArray[i]));
    }
}

function testSetUTCHours() {
    var testName          = "testSetUTCHours()";

    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 1, 22, 23];

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setUTCHours(testDataArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCHours());
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        tmpDate.setUTCHours(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCHours());
    }

    var testInvalidDataArray   = [-1, 60, 70];
    var testFunctionName  = "setUTCHours";
    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setUTCHours(testInvalidDataArray[i]);
        cmpDate.setUTCHours(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getUTCHours() == cmpDate.getUTCHours());
    }
}

function testGetUTCMilliseconds(){
    var testName          = "testGetUTCMilliseconds()";

    var minData = 0;
    var maxData = 999;
    var expectedUTCDate = 12;

    TestEngine.log(date.getUTCMilliseconds());
    TestEngine.test(testName + "isNumber:",        isNumber(date.getUTCMilliseconds()));

    TestEngine.test(testName + "test Minimum",     minData <= date.getUTCMilliseconds());
    TestEngine.test(testName + "test Maximum",     maxData >= date.getUTCMilliseconds());

    TestEngine.assertEqual(testName + " value",     expectedUTCDate, date.getUTCMilliseconds());

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName + "value",     expectedUTCDate, date.getUTCMilliseconds(testAdditionalParamArray[i]));
    }
}

function testSetUTCMilliseconds() {
    var testName          = "testSetUTCMilliseconds()";

    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 22, 123, 999];

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setUTCMilliseconds(testDataArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCMilliseconds());
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        tmpDate.setUTCMilliseconds(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCMilliseconds());
    }

    var testInvalidDataArray   = [-1, 60, 70];
    var testFunctionName  = "setUTCMilliseconds";
    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setUTCMilliseconds(testInvalidDataArray[i]);
        cmpDate.setUTCMilliseconds(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getUTCMilliseconds() == cmpDate.getUTCMilliseconds());
    }
}

function testGetUTCMinutes(){
    var testName          = "testGetUTCMinutes()";

    var minData = 0;
    var maxData = 59;
    var expectedUTCDate = 55;

    TestEngine.log(date.getUTCMinutes());
    TestEngine.test(testName + "isNumber:",        isNumber(date.getUTCMinutes()));

    TestEngine.test(testName + "test Minimum",     minData <= date.getUTCMinutes());
    TestEngine.test(testName + "test Maximum",     maxData >= date.getUTCMinutes());

    TestEngine.assertEqual(testName + " value",     expectedUTCDate, date.getUTCMinutes());

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++) {
        TestEngine.assertEqual(testName + "value",     expectedUTCDate, date.getUTCMinutes(testAdditionalParamArray[i]));
    }
}

function testSetUTCMinutes() {
    var testName          = "testSetUTCMinutes()";

    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 1, 47, 59];

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setUTCMinutes(testDataArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCMinutes());
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        tmpDate.setUTCMinutes(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCMinutes());
    }

    var testInvalidDataArray   = [-1, 60, 70];
    var testFunctionName  = "setUTCMinutes";
    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setUTCMinutes(testInvalidDataArray[i]);
        cmpDate.setUTCMinutes(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getUTCMinutes() == cmpDate.getUTCMinutes());
    }
}

function testGetUTCMonth(){
    var testName          = "testGetUTCMonth()";

    var minData = 0;
    var maxData = 11;
    var expectedUTCDate = 10;

    TestEngine.log(date.getUTCMonth());
    TestEngine.test(testName + "isNumber:",        isNumber(date.getUTCMonth()));

    TestEngine.test(testName + "test Minimum",     minData <= date.getUTCMonth());
    TestEngine.test(testName + "test Maximum",     maxData >= date.getUTCMonth());

    TestEngine.assertEqual(testName + " value",     expectedUTCDate, date.getUTCMonth());

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName + "value",     expectedUTCDate, date.getUTCMonth(testAdditionalParamArray[i]));
    }
}

function testSetUTCMonth() {
    var testName          = "testSetUTCMonth()";

      var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 1, 10, 11];

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setUTCMonth(testDataArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCMonth());
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        tmpDate.setUTCMonth(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCMonth());
    }

    var testInvalidDataArray   = [-1, 60, 70];
    var testFunctionName  = "setUTCMonth";
    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setUTCMonth(testInvalidDataArray[i]);
        cmpDate.setUTCMonth(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getUTCMonth() == cmpDate.getUTCMonth());
    }
}

function testGetUTCSeconds(){
    var testName          = "testGetUTCSeconds()";

    var minData = 0;
    var maxData = 59;
    var expectedUTCDate = 54;

    TestEngine.log(date.getUTCSeconds());
    TestEngine.test(testName + "isNumber:",        isNumber(date.getUTCSeconds()));

    TestEngine.test(testName + "test Minimum",     minData <= date.getUTCSeconds());
    TestEngine.test(testName + "test Maximum",     maxData >= date.getUTCSeconds());

    TestEngine.assertEqual(testName + " value",     expectedUTCDate, date.getUTCSeconds());

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName + "value",     expectedUTCDate, date.getUTCSeconds(testAdditionalParamArray[i]));
    }
}

function testSetUTCSeconds() {
    var testName          = "testSetUTCSeconds()";

    var tmpDate = new tizen.TZDate(2000, 5, 3);
    var cmpDate = new Date(2000, 5, 3);

    var testDataArray          = [0, 1, 50, 59];

    for(var i=0; i<testDataArray.length; i++){
        tmpDate.setUTCSeconds(testDataArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCSeconds());
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        tmpDate.setUTCSeconds(testDataArray[i], testAdditionalParamArray[i]);
        TestEngine.assertEqual(testName + " data value " + testDataArray[i], testDataArray[i], tmpDate.getUTCSeconds());
    }

    var testInvalidDataArray   = [-1, 60, 70];
    var testFunctionName  = "setUTCSeconds";
    for(var i=0; i<testInvalidDataArray.length; i++){
        tmpDate.setUTCSeconds(testInvalidDataArray[i]);
        cmpDate.setUTCSeconds(testInvalidDataArray[i]);
        TestEngine.test(testName + " data value " + testInvalidDataArray[i], tmpDate.getUTCSeconds() == cmpDate.getUTCSeconds());
    }
}

function testGetTimezone() {
    var testName          = "testGetTimezone()";
    var expectedTimezone  = "Asia/Dubai";

    var retTimezone = date.getTimezone();
    TestEngine.log(testName + "retTimeZone:[" +     isString(retTimezone) + "]");
    TestEngine.test(testName + "isString:",        isString(retTimezone));
    TestEngine.assertEqual(testName + "timezone", expectedTimezone, retTimezone);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName + "timezone", expectedTimezone, date.getTimezone(testAdditionalParamArray[i]));
    }
}

function testToTimezone() {
    var testName = "testToTimezone()";
    var timezone = "Australia/Sydney";        //GMT+11

    var expectedSydneyHours = 11;

    var retDate = date.toTimezone(timezone);

    try {
        TestEngine.log("retDate:" + retDate);
        TestEngine.test(testName + "retDate instanceof tizen.TZDate):",        retDate instanceof tizen.TZDate);
        TestEngine.assertEqual(testName + "expectedHours", expectedSydneyHours, retDate.getHours());

        var testAdditionalParamArray = [ERROR_NUM, null, undefined];
        for(var i=0; i<testAdditionalParamArray.length; i++){
            var retDate = date.toTimezone(timezone, testAdditionalParamArray[i]);
            TestEngine.assertEqual(testName + "expectedHours", expectedSydneyHours, retDate.getHours());
        }

    } catch (e) {
        TestEngine.test("unexpected exception:" + e.name, false);
    }
}

function testToTimezone_N() {
    TestEngine.catchErrorType("name", INVALID_VALUES_ERR, date, "toTimezone");
    TestEngine.catchErrorType("name", INVALID_VALUES_ERR, date, "toTimezone", ERROR_STR);
    TestEngine.catchErrorType("name", INVALID_VALUES_ERR, date, "toTimezone", undefined);
}

function testToLocalTimezone() {
    var testName = "testToLocalTimezone()";
    var timezone = "Australia/Sydney";

    //var expectedHours = 9;

    try {
        var localTimezoneDate = date.toLocalTimezone();//GMT+9
        TestEngine.test(testName + "localTimezoneDate instanceof tizen.TZDate):",        localTimezoneDate instanceof tizen.TZDate);
        //TestEngine.assertEqual(testName + "expectedHours", expectedHours, localTimezoneDate.getHours());

        var testAdditionalParamArray = [ERROR_NUM, null, undefined];
        for(var i=0; i<testAdditionalParamArray.length; i++){
            var localTimezoneDate = date.toLocalTimezone(testAdditionalParamArray[i]);
            //TestEngine.assertEqual(testName + "expectedHours", expectedHours, localTimezoneDate.getHours());
        }

    } catch (e) {
        TestEngine.test("unexpected exception:" + e.name, false);
    }

}


function testToUTC(){
    var testName          = "testToUTC()";
    var utcTime = date.toUTC();
    var expectedUTCTime;
    if (tizen.time.getTimeFormat().indexOf("ap") == -1)
        expectedUTCTime = "Friday, November 11, 2011, 00:55:54 GMT+0000 GMT";
    else
        expectedUTCTime = "Friday, November 11, 2011, 12:55:54 AM GMT+0000 GMT";

    TestEngine.log("UTC Time:" + utcTime);
    TestEngine.test(testName + "isUndefined(retDate):",        !isUndefined(utcTime));
    TestEngine.assertEqual(testName, expectedUTCTime, utcTime);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var utcTime = date.toUTC(testAdditionalParamArray[i]);
        TestEngine.assertEqual(testName, expectedUTCTime, utcTime);
    }
}

function testDifference(){
    var testName          = "testDifference()";

    var expectedLength = -127631360;
    var expectedUnit = "MSECS";
    var testDate = date.addDuration(new tizen.TimeDuration(expectedLength, expectedUnit));

    var differenceDuration = testDate.difference(date);
    TestEngine.log("differenceDuration:" + differenceDuration);
    TestEngine.test(testName + "instanceof tizen.TimeDuration:",        differenceDuration instanceof tizen.TimeDuration);
    TestEngine.assertEqual(testName + "length",  expectedLength, differenceDuration.length);
    TestEngine.assertEqual(testName + "unit",  expectedUnit, differenceDuration.unit);

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var differenceDuration = testDate.difference(date, testAdditionalParamArray[i]);
        TestEngine.test(testName + "instanceof tizen.TimeDuration:",        differenceDuration instanceof tizen.TimeDuration);
        TestEngine.assertEqual(testName + "length",  expectedLength, differenceDuration.length);
        TestEngine.assertEqual(testName + "unit",  expectedUnit, differenceDuration.unit);
    }
}

function testDifference_N(){
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "difference");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "difference", ERROR_NUM);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "difference", null);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "difference", undefined);
}

function testEqualsTo() {
    var testName          = "testEqualsTo()";

    var testDate = new tizen.TZDate(
            expected_year,             //year
            expected_month,             //month
            expected_date,             //day
            expected_hours,             //hours
            expected_minutes,         //minutes
            expected_seconds,         //seconds
            expected_milliseconds,    //milliseconds
            expected_time_zone        //timeZone
    );

    var testDate2 = new tizen.TZDate();

    TestEngine.assertEqual(testName, true,  date.equalsTo(testDate));
    TestEngine.assertEqual(testName, false, date.equalsTo(testDate2));

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, true,  date.equalsTo(testDate, testAdditionalParamArray[i]));
    }
}

function testEqualsTo_N() {
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "equalsTo");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "equalsTo", ERROR_NUM);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "equalsTo", null);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "equalsTo", undefined);
}

function testEarlierThan() {
    var testName          = "testEarlierThan()";

    var testDate = new tizen.TZDate(
            expected_year,             //year
            expected_month,             //month
            expected_date,             //day
            expected_hours + 2,             //hours
            expected_minutes,         //minutes
            expected_seconds,         //seconds
            expected_milliseconds,    //milliseconds
            expected_time_zone        //timeZone
    );
    TestEngine.assertEqual(testName, true,  date.earlierThan(testDate));

    var testDate2 = new tizen.TZDate(
            expected_year,             //year
            expected_month,             //month
            expected_date,             //day
            expected_hours -1,             //hours
            expected_minutes,         //minutes
            expected_seconds,         //seconds
            expected_milliseconds,    //milliseconds
            expected_time_zone        //timeZone
    );
    TestEngine.assertEqual(testName, false, date.earlierThan(testDate2));

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, true,  date.earlierThan(testDate, testAdditionalParamArray[i]));
    }
}

function testEarlierThan_N() {
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "earlierThan");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "earlierThan", ERROR_NUM);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "earlierThan", null);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "earlierThan", undefined);
}

function testLaterThan() {
    var testName          = "testLaterThan()";

    var testDate = new tizen.TZDate(
            expected_year,             //year
            expected_month,             //month
            expected_date,             //day
            expected_hours + 2,             //hours
            expected_minutes,         //minutes
            expected_seconds,         //seconds
            expected_milliseconds,    //milliseconds
            expected_time_zone        //timeZone
    );
    TestEngine.assertEqual(testName, false,  date.laterThan(testDate));

    var testDate2 = new tizen.TZDate(
            expected_year,             //year
            expected_month,             //month
            expected_date,             //day
            expected_hours -1,             //hours
            expected_minutes,         //minutes
            expected_seconds,         //seconds
            expected_milliseconds,    //milliseconds
            expected_time_zone        //timeZone
    );
    TestEngine.assertEqual(testName, true, date.laterThan(testDate2));

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, false,  date.laterThan(testDate, testAdditionalParamArray[i]));
    }
}

function testLaterThan_N() {
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "laterThan");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "laterThan", ERROR_NUM);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "laterThan", null);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "laterThan", undefined);
}

function testAddDuration(){
    var testName          = "testAddDuration()";

    var testDuration = new tizen.TimeDuration(2, "DAYS");

    var addedDate = date.addDuration(testDuration);
    var difference = addedDate.difference(date);

    TestEngine.assertEqual(testName, date.getDate()+2, addedDate.getDate());
    TestEngine.assertEqual(testName, true, difference.equalsTo(testDuration));

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var addedDate = date.addDuration(testDuration, testAdditionalParamArray[i]);
        TestEngine.assertEqual(testName, date.getDate()+2, addedDate.getDate());
    }
}

function testAddDuration_N(){
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "addDuration");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "addDuration", ERROR_NUM);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "addDuration", null);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, date, "addDuration", undefined);
}

function testToLocaleDateString() {
    var testName          = "testToLocaleDateString()";
    //var expectedLocaleDateString = "Friday, November 11, 2011";
    //var expectedLocaleDateString = date.toLocaleDateString();
    var localeDateString = date.toLocaleDateString();
    TestEngine.test("testToLocaleDateString() ", isString(localeDateString));
    if (expectedLocalTimeZone != "TZID")
        TestEngine.assertEqual(testName, expectedLocaleDateString, localeDateString);
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        localeDateString = date.toLocaleDateString(testAdditionalParamArray[i]);
        TestEngine.test("testToLocaleDateString() ", isString(localeDateString));
        if (expectedLocalTimeZone != "TZID")
            TestEngine.assertEqual(testName, expectedLocaleDateString, localeDateString);
    }
}

function testToLocaleTimeString() {
    var testName          = "testToLocaleTimeString()";
    //var expectedLocaleTimeString = "4:55:54 AM";
    //var expectedLocaleTimeString = date.toLocaleTimeString();
    var localeTimeString = date.toLocaleTimeString();
    TestEngine.test("testToLocaleTimeString() ", isString(localeTimeString));
    if (expectedLocalTimeZone != "TZID") {
        if ((expectedLocaleTimeString_12 == localeTimeString)||(expectedLocaleTimeString_24 == localeTimeString)) {
            TestEngine.test("testToLocaleTimeString()", true);
        } else {
            TestEngine.test("testToLocaleTimeString() localeTimeString" + localeTimeString, false);
        }
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        localeTimeString = date.toLocaleTimeString(testAdditionalParamArray[i]);
        TestEngine.test("testToLocaleTimeString() ", isString(localeTimeString));
        if (expectedLocalTimeZone != "TZID") {
            if ((expectedLocaleTimeString_12 == localeTimeString)||(expectedLocaleTimeString_24 == localeTimeString)) {
                TestEngine.test("testToLocaleTimeString()", true);
            } else {
                TestEngine.test("testToLocaleTimeString() localeTimeString" + localeTimeString, false);
            }
        }
    }
}

function testToLocaleString() {
    var testName          = "testToLocaleString()";
    //var expectedLocaleString = "Friday, November 11, 2011 4:55:54 AM";
    //var expectedLocaleString = date.toLocaleString();
    var localeString = date.toLocaleString();
    TestEngine.test("testToLocaleString() ", isString(localeString));
    if (expectedLocalTimeZone != "TZID") {
        if ((expectedLocaleString_12 == localeString)||(expectedLocaleString_24 == localeString)) {
            TestEngine.test("testToLocaleString()", true);
        } else {
            TestEngine.test("testToLocaleString() localeString" + localeString, false);
        }
    }

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        localeString = date.toLocaleString(testAdditionalParamArray[i]);
        TestEngine.test("testToLocaleString() ", isString(localeString));
        if (expectedLocalTimeZone != "TZID") {
            if ((expectedLocaleString_12 == localeString)||(expectedLocaleString_24 == localeString)) {
                TestEngine.test("testToLocaleString()", true);
            } else {
                TestEngine.test("testToLocaleString() localeString" + localeString, false);
            }
        }
    }
}

function testToDateString() {
    var testName          = "testToDateString()";
    var expectedDateString = "Friday, November 11, 2011";

    TestEngine.assertEqual(testName, expectedDateString, date.toDateString());
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, expectedDateString, date.toDateString(testAdditionalParamArray[i]));
    }
}

function testToTimeString() {
    var testName          = "testToDateString()";
    var expectedTimeString;
    if (tizen.time.getTimeFormat().indexOf("ap") == -1)
        expectedTimeString = "04:55:54 GMT+0400 United Arab Emirates Time";
    else
        expectedTimeString = "4:55:54 AM GMT+0400 United Arab Emirates Time";

    TestEngine.assertEqual(testName, expectedTimeString, date.toTimeString());
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, expectedTimeString, date.toTimeString(testAdditionalParamArray[i]));
    }
}

function testToString() {
    var testName          = "testToString()";
    var expectedString;
    if (tizen.time.getTimeFormat().indexOf("ap") == -1)
        expectedString = "Friday, November 11, 2011, 04:55:54 GMT+0400 United Arab Emirates Time";
    else
        expectedString = "Friday, November 11, 2011, 4:55:54 AM GMT+0400 United Arab Emirates Time";

    TestEngine.assertEqual(testName, expectedString, date.toString());
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, expectedString, date.toString(testAdditionalParamArray[i]));
    }
}

function testGetTimezoneAbbreviation() {
    var testName        = "testGetTimezoneAbbreviation()";
    var expectedString = "CST";
    var testDate = date.toTimezone("America/Chicago");

    TestEngine.assertEqual(testName, expectedString, testDate.getTimezoneAbbreviation());
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, expectedString, testDate.getTimezoneAbbreviation(testAdditionalParamArray[i]));
    }
}

function testSecondsFromUTC() {
    var testName          = "testSecondsFromUTC()";
    var expectedData = -14400;

    TestEngine.assertEqual(testName, expectedData, date.secondsFromUTC());
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, expectedData, date.secondsFromUTC(testAdditionalParamArray[i]));
    }
}

function testIsDST() {
    var testName          = "testIsDST()";
    var expectedData = false;

    TestEngine.assertEqual(testName, expectedData, date.isDST());
    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        TestEngine.assertEqual(testName, expectedData, date.isDST(testAdditionalParamArray[i]));
    }
}

function testGetPreviousDSTTransition() {
    var testName          = "testGetPreviousDSTTransition()";

    var testDate = new tizen.TZDate(
            expected_year,             //year
            expected_month,         //month
            expected_date,             //day
            expected_hours,         //hours
            expected_minutes,         //minutes
            expected_seconds,         //seconds
            expected_milliseconds,    //milliseconds
            "America/Chicago"        //timeZone
    );

    var expectedData = 6;
    var result = testDate.getPreviousDSTTransition();

    TestEngine.assertEqual(testName, true, result instanceof tizen.TZDate);
    TestEngine.assertEqual(testName, expectedData, result.getDate());
    TestEngine.test(testName + "isNull(date.getPreviousDSTTransition())",        isNull(date.getPreviousDSTTransition()));

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var result = testDate.getPreviousDSTTransition();
        TestEngine.assertEqual(testName, true, result instanceof tizen.TZDate);
        TestEngine.assertEqual(testName, expectedData, result.getDate());
    }
}

function testGetNextDSTTransition() {
    var testName          = "testGetNextDSTTransition()";

    var testDate = new tizen.TZDate(
            expected_year,             //year
            expected_month,         //month
            expected_date,             //day
            expected_hours,         //hours
            expected_minutes,         //minutes
            expected_seconds,         //seconds
            expected_milliseconds,    //milliseconds
            "America/Chicago"        //timeZone
    );

    var expectedData = 11;
    var result = testDate.getNextDSTTransition();
    TestEngine.assertEqual(testName, true, result instanceof tizen.TZDate);
    TestEngine.assertEqual(testName, expectedData, result.getDate());

    TestEngine.test(testName + "isNull(date.getPreviousDSTTransition())",        isNull(date.getNextDSTTransition()));

    var testAdditionalParamArray = [ERROR_NUM, null, undefined];
    for(var i=0; i<testAdditionalParamArray.length; i++){
        var result = testDate.getNextDSTTransition();
        TestEngine.assertEqual(testName, true, result instanceof tizen.TZDate);
        TestEngine.assertEqual(testName, expectedData, result.getDate());
    }
}

function UTC_setDateTimeChangeListener_P_001 () {
    TestEngine.log("UTC_setDateTimeChangeListener_P_001");

    tizen.time.setDateTimeChangeListener(emptyFunction);
    TestEngine.test("UTC_setDateTimeChangeListener_P_001", true);
}

function UTC_setDateTimeChangeListener_N_001 () {
    TestEngine.log("UTC_setDateTimeChangeListener_N_001");

    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", true);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", false);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", NaN);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", 0);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", "");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", "TIZEN");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", []);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", { });
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", undefined);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setDateTimeChangeListener", null);

    TestEngine.test("UTC_setDateTimeChangeListener_N_001", true);
}

function UTC_unsetDateTimeChangeListener_P_001 () {
    TestEngine.log("UTC_unsetDateTimeChangeListener_P_001");

    tizen.time.unsetDateTimeChangeListener();
    TestEngine.test("UTC_unsetDateTimeChangeListener_P_001", true);
}

function UTC_setTimezoneChangeListener_P_001 () {
    TestEngine.log("UTC_setTimezoneChangeListener_P_001");

    try {
        tizen.time.setTimezoneChangeListener(emptyFunction);
        TestEngine.test("UTC_setTimezoneChangeListener_P_001", true);
    } catch (e) {
        TestEngine.test("UTC_setTimezoneChangeListener_P_001" + e.name + " : " + e.message, false);
    }
}

function UTC_setTimezoneChangeListener_N_001 () {
    TestEngine.log("UTC_setTimezoneChangeListener_N_001");

    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", true);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", false);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", NaN);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", 0);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", "");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", "TIZEN");
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", []);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", { });
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", undefined);
    TestEngine.catchErrorType("name", TYPE_MISMATCH_ERR, tizen.time, "setTimezoneChangeListener", null);

    TestEngine.test("UTC_setTimezoneChangeListener_N_001", true);
}

function UTC_unsetTimezoneChangeListener_P_001 () {
    TestEngine.log("UTC_unsetTimezoneChangeListener_P_001");
    try {
        tizen.time.unsetTimezoneChangeListener();
        TestEngine.test("UTC_unsetTimezoneChangeListener_P_001", true);
    } catch (e) {
        TestEngine.test("UTC_setTimezoneChangeListener_P_001" + e.name + " : " + e.message, false);
    }
}
